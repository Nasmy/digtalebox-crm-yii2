<?php

namespace app\controllers;

use app\components\FileKit;
use app\components\ToolKit;
use app\models\ABTestingCampaign;
use app\models\Campaign;
use app\models\DragDropMessageTemplate;
use app\models\Form;
use app\models\User;
use Exception;
use Yii;
use app\models\MessageTemplate;
use app\models\MessageTemplateSearch;
use yii\db\StaleObjectException;
use yii\filters\AccessControl;
use yii\filters\auth\CompositeAuth;
use yii\helpers\Json;
use yii\web\BadRequestHttpException;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use \app\controllers\WebUserController;
use \app\components\JsonFixer;

/**
 * MessageTemplateController implements the CRUD actions for MessageTemplate model.
 */
class MessageTemplateController extends WebUserController
{
    public $layout = 'column1';

    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['create', 'update', 'admin', 'delete', 'view'],
                'rules' => [
                    // allow authenticated users
                    [
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                    // everything else is denied by default
                ],
            ],
        ];
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        Yii::$app->toolKit->changeDbConnectionWeb();
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
                'view' => '@app/views/site/error.php',
                'layout' => 'error'

            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }

    /**
     * Lists all MessageTemplate models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new MessageTemplateSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * {@inheritdoc}
     * @throws BadRequestHttpException
     */
    public function beforeAction($action)
    {
        $actionList = ['drag-drop-email-create', 'get-old-content', 'get-new-content', 'get-template-content'];
        if (in_array($this->action->id, $actionList)) {
            Yii::$app->controller->enableCsrfValidation = false;
            echo header('Access-Control-Allow-Origin: *');
        } else {
            Yii::$app->controller->enableCsrfValidation = true;
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * @description landing page of message template
     */

    public function actionAdmin()
    {
        $searchModel = new MessageTemplateSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        if (isset($_GET['MessageTemplate']))
            $dataProvider->attributes = $_GET['MessageTemplate'];

        return $this->render('admin', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single MessageTemplate model.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
        Yii::$app->toolKit->setResourceInfo();
        $model = $this->findModel($id);

        if ($model->checkEmailTemplate($model->templateCategory, [MessageTemplate::MSG_CAT_EMAIL, MessageTemplate::MSG_CAT_BOTH])) {
            $isFileExist = $model->checkFileIsExist($id);
            if (!$isFileExist) {
                Yii::$app->session->setFlash('error', Yii::t('messages', 'Template file is not exit.'));
                return $this->redirect(['admin']);
            }
        }

        return $this->render('view', [
            'model' => $this->findModel($id),
            'emailTemplateContent' => $model->getFilePath($id)
        ]);
    }

    /**
     * Creates a new MessageTemplate model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     * @throws Exception
     */
    public function actionCreate()
    {
        $model = new MessageTemplate();
        $messageTemplateCat = $_GET['templateCategory'];


        $templateName = $model->getRenderTemplate($messageTemplateCat, 'create');

        if (isset($_POST['MessageTemplate'])) {
            $model->scenario = $model->getTemplateScenario($messageTemplateCat, 'create');
            $model->attributes = $_POST['MessageTemplate'];
            $model->templateCategory = $messageTemplateCat;
            $model->dateTime = User::convertSystemTime();
            $model->createdBy = Yii::$app->user->id;
            $model->createdAt = User::convertSystemTime();
            $model->type = 1;

            if ($model->checkEmailTemplate($messageTemplateCat, [MessageTemplate::MSG_CAT_EMAIL])) {
                $randomCode = $_POST['MessageTemplate']['dragDropMessageCode'];
                $model->dragDropMessageCode = (DragDropMessageTemplate::isTemplateExist($randomCode)) ? $randomCode : null;
            }

            if (!empty($model->dragDropMessageCode) && !$this->validateJsonFormatOfTemplate($model->dragDropMessageCode)) {
                Yii::$app->session->setFlash('error', Yii::t('messages', 'This template contain errors. This cant be duplicate'));
                return $this->redirect(['admin']);
            }

            if ($model->validate()) {
                if ($model->save(false)) {
                    Yii::$app->session->setFlash('success', Yii::t('messages', 'Message template created'));
                    Yii::$app->toolKit->setResourceInfo();
                    if ($model->checkEmailTemplate($messageTemplateCat, [MessageTemplate::MSG_CAT_EMAIL]) && file_put_contents(Yii::$app->toolKit->resourcePathRelative . $model->id . '.html', $model->getCleanedContent($model->getTemplateTop()) . $model->getTemplateBottom())) {
                        Yii::$app->appLog->writeLog("Html file uploaded");
                        if ((DragDropMessageTemplate::isTemplateExist($randomCode))) {
                            @unlink(Yii::$app->toolKit->resourcePathRelative . $model->dragDropMessageCode . '.html');
                            Yii::$app->appLog->writeLog("Drag & Drop Email Html file Deleted");
                        }
                    }
                    return $this->redirect(['admin']);
                } else {
                    Yii::$app->session->setFlash('error', Yii::t('messages', 'Message template create failed'));
                    Yii::$app->appLog->writeLog("Message template create failed.Name:{$model->name}");
                }
            } else {
                Yii::$app->appLog->writeLog("Message template create failed.Validation errors:" . Json::encode($model->errors));
            }
        }

        return $this->render($templateName, [
            'model' => $model,
            'templateOptions' => array(MessageTemplate::MASS_TEMPLATE => Yii::t('messages', 'Mass Message'))
        ]);
    }


    /**
     * Get new contented crated via drag drop email content creator
     * @param null $code
     * @param null $MsgId
     * @return false|string
     */
    public function actionGetNewContent($code = null, $MsgId = null, $isDuplicate = false)
    {
        $model = DragDropMessageTemplate::find()->where(['code' => $code]);
        $messageTemplate = MessageTemplate::find()->where(['dragDropMessageCode' => $code]);
        Yii::$app->toolKit->setResourceInfo();
        if (null != $model) {
            $file = Yii::$app->toolKit->resourcePathRelative . $code . '.html';
            if (file_exists($file)) {
                Yii::$app->appLog->writeLog("Drag Drop Email content :{$code}");
                $return = array('content' => file_get_contents(Yii::$app->toolKit->resourcePathRelative . $code . '.html'));
            } else {
                $id = $messageTemplate->id;
                Yii::$app->appLog->writeLog("Email content :{$id}");
                $return = array('content' => file_get_contents(Yii::$app->toolKit->resourcePathRelative . $id . '.html'));
            }
        } else if (!ToolKit::isEmpty($MsgId)) {
            Yii::$app->appLog->writeLog("Email content Normal :{$MsgId}");
            $return = array('content' => file_get_contents(Yii::$app->toolKit->resourcePathRelative . $MsgId . '.html'));
        } else {
            $return = array('content' => '0');
        }
        return json_encode($return);
    }


    /**
     * Updates an existing MessageTemplate model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     * @throws Exception
     */
    public function actionUpdate($id, $catId)
    {
        Yii::$app->toolKit->setResourceInfo();
        $model = $this->findModel($id);

        $orgTemplateCode = $model->dragDropMessageCode;

        if (!empty($orgTemplateCode) && !$this->validateJsonFormatOfTemplate($orgTemplateCode)) {
            Yii::$app->session->setFlash('error', Yii::t('messages', 'This template contain errors. This cant be duplicate'));
            return $this->redirect(['admin']);
        }

        $templateName = $model->getRenderTemplate($catId, 'update');

        if ($model->IsTemplateInUse($id)) {
            Yii::$app->session->setFlash('error', Yii::t('messages', 'Template currently used by a campaign'));
            return $this->redirect(['admin']);
        }

        if (isset($_POST['MessageTemplate'])) {
            $oldTemplateCategory = $model->templateCategory;
            $model->scenario = $model->getTemplateScenario($catId, 'update');
            $model->attributes = $_POST['MessageTemplate'];
            if ($catId != $oldTemplateCategory) {
                $model->templateCategory = $oldTemplateCategory;
            } else {
                $model->templateCategory = $catId;
            }

            $model->dateTime = User::convertSystemTime();
            $model->createdBy = Yii::$app->user->id;
            $model->createdAt = User::convertSystemTime();

            if ($model->checkEmailTemplate($catId, [MessageTemplate::MSG_CAT_EMAIL])) {
                $randomCode = $_POST['MessageTemplate']['dragDropMessageCode'];
                $model->dragDropMessageCode = (DragDropMessageTemplate::isTemplateExist($randomCode)) ? $randomCode : null;
            }

            if (!empty($model->dragDropMessageCode) && !$this->validateJsonFormatOfTemplate($model->dragDropMessageCode)) {
                Yii::$app->session->setFlash('error', Yii::t('messages', 'This template contain errors. This cant be duplicate'));
                return $this->redirect(['admin']);
            }

            if ($model->validate()) {
                if ($model->save(false)) {
                    Yii::$app->appLog->writeLog("Message template updated.Name:{$model->name}");
                    Yii::$app->session->setFlash('success', Yii::t('messages', 'Message template updated'));
                    Yii::$app->toolKit->setResourceInfo();
                    if ($model->checkEmailTemplate($catId, [MessageTemplate::MSG_CAT_EMAIL]) && file_put_contents(Yii::$app->toolKit->resourcePathRelative . $model->id . '.html', $model->getTemplateTop() . $model->getCleanedContent() . $model->getTemplateBottom())) {
                        Yii::$app->appLog->writeLog("Html file uploaded");
                        if ((DragDropMessageTemplate::isTemplateExist($randomCode))) {
                            @unlink(Yii::$app->toolKit->resourcePathRelative . $model->dragDropMessageCode . '.html');
                            Yii::$app->appLog->writeLog("Drag Drop Message template deleted. Name:{$model->dragDropMessageCode}");
                        }
                    }
                    return $this->redirect(['admin']);
                } else {
                    Yii::$app->session->setFlash('', Yii::t('messages', 'Message template update failed'));
                    Yii::$app->appLog->writeLog("Message template update failed.Name:{$model->name}");
                }
            } else {
                Yii::$app->appLog->writeLog("Message template update failed.Validation errors:" . Json::encode($model->errors));
            }
        }

        if ($model->checkEmailTemplate($catId, [MessageTemplate::MSG_CAT_EMAIL])) {
            $isFileExist = $model->checkFileIsExist($id);
            if (!$isFileExist) {
                Yii::$app->session->setFlash('error', Yii::t('messages', 'Template file is not exit.'));
                return $this->redirect(['admin']);
            } else {
                $model->content = $model->getFilePath($id);
            }
        }


        return $this->render($templateName, [
            'model' => $model,
            'templateOptions' => $model->getTemplateTypeOptions(),
        ]);
    }

    /**
     * @param $id
     * Get id of template
     * Retrieve template information via id
     * Create duplicate form
     * Remove Name and description
     * Validate Form
     * Save
     */
    public function actionDuplicate($id, $catId)
    {
        Yii::$app->toolKit->setResourceInfo();
        $model = $this->findModel($id);
        $orgTemplateCode = $model->dragDropMessageCode;

        if (!empty($orgTemplateCode) && !$this->validateJsonFormatOfTemplate($orgTemplateCode)) {
            Yii::$app->session->setFlash('error', Yii::t('messages', 'This template contain errors. This cant be duplicate'));
            return $this->redirect(['admin']);
        }
        $model->name = '';
        $model->description = '';
        $templateName = $model->getRenderTemplate($catId, 'update');

        $templateOption = $model->getTemplateTypeOptions();
        if (isset($_POST['MessageTemplate'])) {
            $model = new MessageTemplate();
            $model->scenario = $model->getTemplateScenario($catId, 'create');
            $model->attributes = $_POST['MessageTemplate'];

            $model->templateCategory = $catId;
            $model->dateTime = User::convertSystemTime();
            $model->createdBy = Yii::$app->user->id;
            $model->createdAt = User::convertSystemTime();
            $model->type = 1;

            if ($model->checkEmailTemplate($catId, [MessageTemplate::MSG_CAT_EMAIL])) {
                $randomCode = $_POST['MessageTemplate']['dragDropMessageCode'];
                $model->dragDropMessageCode = (DragDropMessageTemplate::isTemplateExist($randomCode)) ? $randomCode : null;
            }

            if (!empty($model->dragDropMessageCode) && !$this->validateJsonFormatOfTemplate($model->dragDropMessageCode)) {
                Yii::$app->session->setFlash('error', Yii::t('messages', 'This template contain errors. This cant be duplicate'));
                return $this->redirect(['admin']);
            }

            if ($model->validate()) {
                if ($model->save(false)) {
                    Yii::$app->session->setFlash('success', Yii::t('messages', 'Message template created'));
                    Yii::$app->toolKit->setResourceInfo();
                    if ($model->checkEmailTemplate($catId, [MessageTemplate::MSG_CAT_EMAIL]) && file_put_contents(Yii::$app->toolKit->resourcePathRelative . $model->id . '.html', $model->getCleanedContent($model->getTemplateTop()) . $model->getTemplateBottom())) {
                        Yii::$app->appLog->writeLog("Html file uploaded");
                        if ((DragDropMessageTemplate::isTemplateExist($randomCode))) {
                            @unlink(Yii::$app->toolKit->resourcePathRelative . $model->dragDropMessageCode . '.html');
                            Yii::$app->appLog->writeLog("Drag & Drop Email Html file Deleted");
                        }
                    }
                    return $this->redirect(['admin']);
                } else {
                    Yii::$app->session->setFlash('error', Yii::t('messages', 'Message template create failed'));
                    Yii::$app->appLog->writeLog("Message template create failed.Name:{$model->name}");
                }
            } else {
                Yii::$app->appLog->writeLog("Message template create failed.Validation errors:" . Json::encode($model->errors));
            }
        }
        $templateOption['isDuplicate'] = true;

        if ($model->checkEmailTemplate($catId, [MessageTemplate::MSG_CAT_EMAIL])) {
            $isFileExist = $model->checkFileIsExist($id);
            if (!$isFileExist) {
                Yii::$app->session->setFlash('error', Yii::t('messages', 'Template file is not exit.'));
                return $this->redirect(['admin']);
            } else {
                $model->content = $model->getFilePath($id);
            }
        }

        return $this->render($templateName, [
            'model' => $model,
            'templateOptions' => $templateOption,
        ]);
    }

    public function validateJsonFormatOfTemplate($temCode)
    {

        $dragdrop = DragDropMessageTemplate::find()->where(['code' => $temCode])->one();
        $jsonValidate = true;
        if (!ToolKit::json_validator($dragdrop->template)) {
            $jsonFixer = (new JsonFixer)->fix($dragdrop->template);
            $dragdrop->template = $jsonFixer;
            $dragdrop->save();
            $jsonValidate = !ToolKit::json_validator($dragdrop->template) ? false : true;
        }
        return $jsonValidate;
    }

    /**
     * Preview HTML
     */
    public function actionHtmlPreview($id)
    {
        $this->layout = 'dialog';
        $model = MessageTemplate::findOne($id);
        Yii::$app->toolKit->setResourceInfo();


        return $this->render('emailTempContent', array(
            'model' => $model,
            'emailTemplateContent' => file_get_contents(Yii::$app->toolKit->resourcePathRelative . $id . '.html')
        ));
    }

    /**
     * Deletes an existing MessageTemplate model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     * @throws \Throwable
     * @throws StaleObjectException
     */
    public function actionDelete($id)
    {
        $model = $this->findModel($id);
        $name = $model->name;
        $dragDropMessageCode = $model->dragDropMessageCode;
        $dragDropModel = null;
        $modelForm = Form::find()->where(['templateId' => $id])->one();
        $aBTestCampaign = ABTestingCampaign::find()->where('messageTemplateIdA = :messageTemplateIdA OR 
		messageTemplateIdB = :messageTemplateIdB', [':messageTemplateIdA' => $id, 'messageTemplateIdB' => $id])->one();

        $dragDropModelCount = MessageTemplate::find()->where(['dragDropMessageCode' => $dragDropMessageCode])->count();

        if (!ToolKit::isEmpty($dragDropMessageCode) && !($dragDropModelCount > 1)) {
            $dragDropModel = DragDropMessageTemplate::find()->where(['code' => $dragDropMessageCode])->one();
        }

        if (!$model->IsTemplateInUse($id) && null == $modelForm && ToolKit::isEmpty($aBTestCampaign)) {
            if ($model->delete()) {
                Yii::$app->toolKit->setResourceInfo();
                @unlink(Yii::$app->toolKit->resourcePathRelative . $id . '.html');
                Yii::$app->session->setFlash('success', Yii::t('messages', 'Template deleted'));
                // Yii::app()->appLog->writeLog("Message template deleted.Name:{$name}");
                if (!ToolKit::isEmpty($dragDropModel) && $dragDropModel->delete()) {
                    @unlink(Yii::$app->toolKit->resourcePathRelative . $dragDropMessageCode . '.html');
                    Yii::$app->appLog->writeLog("Drag Drop Message template deleted.Name:{$dragDropMessageCode}");
                }
            } else {
                Yii::$app->appLog->writeLog("Message template delete failed.Name:{$name}");
                Yii::$app->session->setFlash('error', Yii::t('messages', 'Template delete failed'));
            }
        } else {
            Yii::$app->session->setFlash('error', Yii::t('messages', 'Template could not be deleted.Already being assigned for a Campaign or Form.'));
            Yii::$app->appLog->writeLog("Message template delete failed.Already assigned for a campaign or form.Name:{$name}");
        }

        return $this->redirect(['admin']);
    }

    /**
     * Preview template.
     * @param integer $id the ID of the model to be previeved
     */
    public function actionPreview($id)
    {
        Yii::$app->toolKit->setResourceInfo();
        echo file_get_contents(Yii::$app->toolKit->resourcePathRelative . $id . '.html');
    }

    /**
     * Preview available email templates.
     */
    public function actionShowTemplates()
    {
        $model = new MessageTemplate();
        $this->layout = 'dialog';

        return $this->render('emailTemp', array(
            'model' => $model,
        ));
    }

    /**
     * Drag & Drop Email Content creating via Ajax call from Mosaico
     * @return bool Success or Fail
     * @throws Exception
     */
    public function actionDragDropEmailCreate()
    {
        $results = false;
        $model = DragDropMessageTemplate::find()->where(['code' => $_POST['code']])->all();
        if (null == $model) {
            $model = new DragDropMessageTemplate();
            $model->scenario = 'create';
            $model->createdAt = User::convertSystemTime();
            $model->updatedAt = User::convertSystemTime();
        } else {
            $model = DragDropMessageTemplate::find()->where(['code' => $_POST['code']])->one();
            $model->scenario = 'update';
            $model->updatedAt = User::convertSystemTime();
        }
        $model->attributes = $_POST;
        $model->code = $_POST['code'];
        $model->metadata = $_POST['metadata'];
        $model->template = $_POST['template'];
        $model->createdBy = $_POST['userId'];
        if ($model->save(false)) {
            if (isset($_POST['type'])) {
                Yii::$app->appLog->writeLog("Message template created.Name:{$model->code}");
                Yii::$app->toolKit->setResourceInfo();
                $html = $_POST['downloadForm'][2]['value'];
                $protocolPattern = 'http://';
                $replaceProtocol = 'https://';
                if (YII_ENV != 'dev') {
                    $html = str_replace($protocolPattern, $replaceProtocol, $html);
                }
                $myFile = fopen(
                    Yii::$app->toolKit->resourcePathRelative . $model->code . ".html",
                    "w"
                ) or die("Unable to open file!");
                fwrite($myFile, $html);
                fclose($myFile);
                $results = true;
            }
        } else {
            $results = false;
        }

        return $results;
    }

    /**
     * @return false|string
     */
    public function actionGetOldContent()
    {
        if (isset($_POST['code'])) {
            $code = $_POST['code'];
        }
        $model = DragDropMessageTemplate::find()->where(['code' => $code])->one();
        if (null != $model) {
            $return = array("metadata" => $model->metadata, "template" => $model->template);
            return json_encode($return);
        } else {
            echo null;
        }
    }

    /**
     * @param $fileName
     * @return string
     */
    public function actionGetTemplateContent($fileName)
    {
        return $this->renderPartial("emailTemplates/{$fileName}");
    }

    /**
     * Finds the MessageTemplate model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return MessageTemplate the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = MessageTemplate::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }
}
