<?php

namespace app\controllers;

use app\components\ThresholdChecker;
use app\components\ToolKit;
use app\components\WebUser;
use app\models\Activity;
use app\models\EventReminder;
use app\models\EventReminderTracker;
use app\models\EventUser;
use app\models\FbProfile;
use app\models\MsgBox;
use app\models\OsmLog;
use app\models\SearchCriteria;
use app\models\SearchCriteriaSearch;
use app\models\User;
use Throwable;
use Yii;
use app\models\Event;
use app\models\EventSearch;
use yii\base\ExitException;
use yii\db\Exception;
use yii\db\Expression;
use yii\db\ExpressionBuilder;
use yii\db\Query;
use yii\db\StaleObjectException;
use yii\filters\AccessControl;
use yii\helpers\Json;
use yii\web\BadRequestHttpException;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\web\Response;
use yii\web\UploadedFile;
use yii\widgets\ActiveForm;
use yii\helpers\Url;
use app\controllers\WebUserController;

/**
 * EventController implements the CRUD actions for Event model.
 */
class EventController extends WebUserController
{
    public $layout = 'column1';

    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['create', 'update', 'admin', 'delete', 'view'],
                'rules' => [
                    // allow authenticated users
                    [
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                    // everything else is denied by default
                ],
            ],
        ];
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        Yii::$app->toolKit->changeDbConnectionWeb();
    }

    /**
     * @return string  allowed actions
     */
    public function allowedActions()
    {
        $allowed = array(
            'Event.EventView',
            'Event.Confirm',
            'Event.CalendarEvents',
            'Event.ShowEvents',
            'Event.Members',
            'Event.GetNames',
            'Event.ShareByEmail',
            'Event.Participate',
            'Event.Maybe',
            'Event.EventOwner',
            'Event.SendEvent',
            'Event.GetTemplateContent',
            'Event.Participants',
            'Event.Export',
            'Event.GetExportFile',
            'Event.SearchGrid',
            'Event.Preview',
            'Event.EventSearch',
            'Event.Upload',
        );

        return implode(',', $allowed);
    }


    /**
     * {@inheritdoc}
     * @throws BadRequestHttpException
     */
    public function beforeAction($action)
    {
        $actionList = ['confirm'];
        if (in_array($this->action->id, $actionList)) {
            Yii::$app->controller->enableCsrfValidation = false;
            echo header('Access-Control-Allow-Origin: *');
        } else {
            Yii::$app->controller->enableCsrfValidation = true;
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Manages all models.
     */
    public function actionAdmin()
    {
        $model = new Event();
        $model->scenario = 'search';
        $model->rsvpStatus = Event::RSVP_ENABLE;

        $model->loadDefaultValues();
        $model->startDate = NULL;
        $model->status = NULL;
        $model->priority = NULL;

        $thresholdChecker = new ThresholdChecker(Yii::$app->session->get('packageType'));
        $maxLimit = $thresholdChecker->getRemainingCount(ThresholdChecker::GEO_TAGGING_LIMIT);
        $osmModel = new OsmLog();
        $osmCanProceed = $osmModel->checkLimit($maxLimit);
        if (isset($_POST['Event'])) {
            $model->attributes = $_POST['Event'];
            Yii::$app->appLog->writeLog("Calendar get events:" . json_encode($model->attributes));
        }

        Yii::$app->toolKit->addActivity(
            Yii::$app->user->id, Activity::ACT_CALENDAR_EVENT, Yii::$app->session->get('teamId')
        );

        return $this->render('admin', array(
            'model' => $model,
            'osmMaxLimit' => $maxLimit,
            'osmCanProceed' => $osmCanProceed
        ));
    }


    /**
     * Displays a single Event model.
     * @param integer $id the ID of the model to be displayed
     * @param null $key
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     * @throws ExitException Displays a particular model.
     */
    public function actionView($id, $key = null)
    {

        if (!is_null(Yii::$app->request->get('export'))) {
            $this->actionExport();
            Yii::$app->end();
        }

        $model = $this->findModel($id);
        $modelMsgBox = new MsgBox();
        $modelMsgBox->scenario = 'sendEvent';

        $userList = array();
        $isExpired = strtotime($model->startTimeStamp) < strtotime('today midnight') || strtotime('today midnight') > strtotime($model->endTimeStamp);
        $model->startTimeStamp = User::convertDBTime($model->startTimeStamp);
        $model->endTimeStamp = User::convertDBTime($model->endTimeStamp);
        $shareUri = str_replace('{domain}', Yii::$app->toolKit->domain, Yii::$app->params['absUrl']) . '/event/event-view?code=' . base64_encode('{"event":' . $model->id . '}');
        $shareByEmailDetails = array('subject' => Yii::t('messages', 'DigitaleBox Event'), 'body' => Yii::t('messages', 'Event: ') . $shareUri);

        // Add activity
        if (Event::ACCEPTED == $model->status) {
            $params = array(
                'eventName' => $model->name,
                'link' => str_replace('{domain}', Yii::$app->toolKit->domain, Yii::$app->params['absUrl']) . "/event/view/{$model->id}",
                'section' => Activity::ACT_SECTION_EVENT,
            );
        } else {
            $params = array(
                'eventName' => $model->name,
                'Key' => $key,
            );
        }

        Yii::$app->toolKit->addActivity(
            Yii::$app->user->id, Activity::ACT_VIEW_EVENT, Yii::$app->session->get('teamId'), json_encode($params)
        );
        // End

        Yii::$app->toolKit->setResourceInfo();
        $criteriaOptions = SearchCriteria::getSavedSearchOptions(null, SearchCriteria::ADVANCED);
        $alertMsg = '<strong>' . Yii::t('messages', 'Warning!') . '</strong> ' . Yii::t('messages', 'This event was rejected by the organization.');
        $eventReminderModel = new EventReminder();
        $searchEvent = new EventUser();
        if (isset($_POST['ajax'])) {

            $userIdList = explode(',', $modelMsgBox->userlist);
            if (!empty($modelMsgBox->userlist)) {
                foreach ($userIdList as $id) {
                    $userModel = User::findOne($id);
                    $userList[] = array('id' => (int)$id, 'name' => "{$userModel->getName()} - {$userModel->email}");
                }
            }
            $thresholdChecker = new ThresholdChecker(Yii::$app->session->get('packageType'));
            $maxLimit = $thresholdChecker->getRemainingCount(ThresholdChecker::GEO_TAGGING_LIMIT);
            $osmLog = new OsmLog ();
            $osmCanProceed = $osmLog->checkLimit($maxLimit);
            $this->layout = 'dialog';

            return $this->render('_event', [
                'model' => $model,
                'shareByEmailDetails' => $shareByEmailDetails,
                'isExpired' => $isExpired,
                'shareUri' => $shareUri,
                'isInvite' => true,
                'memberId' => false,
                'alertMsg' => $alertMsg,
                'modelMsgBox' => $modelMsgBox,
                'criteriaOptions' => $criteriaOptions,
                'erbacModule' => WebUser::className(),
                'osmMaxLimit' => $maxLimit,
                'osmCanProceed' => $osmCanProceed,
                'userlist' => json_encode($userList),
            ]);

        } else {
            $rsvpGroups = EventUser::getEventRsvpStatusCount($id);
            $fbRsvpGroups = EventUser::getEventRsvpStatusCount($id, true);
            $members = EventUser::getMembers($id, $key, Event::EMAIL);

            if (isset($_GET['User'])) {
                $userModel = new User();
                $User = $_GET['User'];

                // passing previous data
                $userModel->firstName = $User['firstName'];
                $userModel->lastName = $User['lastName'];
                $userModel->email = $User['email'];

                $searchEvent->firstName = $User['firstName'];
                $searchEvent->lastName = $User['lastName'];
                $searchEvent->email = $User['email'];
                $members = $searchEvent->searchEvent($id, $key, Event::EMAIL);
                return $this->render('view', array(
                    'model' => $model,
                    'shareByEmailDetails' => $shareByEmailDetails,
                    'isExpired' => $isExpired,
                    'shareUri' => $shareUri,
                    'isInvite' => true,
                    'memberId' => false,
                    'rsvpGroups' => $rsvpGroups,
                    'rsvpGroupsFb' => $fbRsvpGroups,
                    'alertMsg' => $alertMsg,
                    'members' => $members,
                    'erbacModule' => WebUser::className(),
                    'eventReminderModel' => $eventReminderModel,
                    'userModel' => $userModel,
                ));
            } else {

                $userModel = new User();
                return $this->render('view', array(
                    'model' => $model,
                    'shareByEmailDetails' => $shareByEmailDetails,
                    'isExpired' => $isExpired,
                    'shareUri' => $shareUri,
                    'isInvite' => true,
                    'memberId' => false,
                    'rsvpGroups' => $rsvpGroups,
                    'rsvpGroupsFb' => $fbRsvpGroups,
                    'alertMsg' => '<strong>' . Yii::t('messages', 'Warning!') . '</strong> ' . Yii::t('messages', 'This event was rejected by the organization.'),
                    'members' => $members,
                    'erbacModule' => WebUser::className(),
                    'eventReminderModel' => $eventReminderModel,
                    'userModel' => $userModel,
                ));
            }
        }

    }

    /**
     * Creates a new Event model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     * @throws \Exception
     */
    public function actionCreate()
    {
        $erbacModule = '';
        $model = new Event();
        $model->startDate = date('Y-m-d', strtotime(User::convertDBTime()));
        $model->endDate = '';
        $model->id = '';
        $model->description = '';
        $thresholdChecker = new ThresholdChecker(Yii::$app->session->get('packageType'));
        $maxLimit = $thresholdChecker->getRemainingCount(ThresholdChecker::GEO_TAGGING_LIMIT);
        $OsmLog = new OsmLog();
        $osmCanProceed = $OsmLog->checkLimit($maxLimit);

        $this->performAjaxValidation($model);

        $modelUser = User::find()->where(['userType' => User::POLITICIAN])->andWhere('id != :id', [':id' => User::PARTNER_USER_ID])->one();

        /* due to facebook is not using hided
         * $modelFbProf = FbProfile::find()->where(array('userId' => $modelUser->id))->one();
         */

        if (isset($_GET['date'])) {
            $model->startDate = $_GET['date'];
        }

        if (isset($_POST['Event'])) {
            $base_url = Yii::$app->request->getBaseUrl(true);
            $model->attributes = $_POST['Event'];
            $input_description = $model->description;
            $model->description = str_replace('src="../..', 'src="' . $base_url, $input_description);
            $interval = strtotime($model->startDate . " " . $model->endTime) - strtotime($model->startDate . " " . $model->startTime);
            $timeDifferent = floor($interval / (3600));
            // $startDateTime = User::convertSystemTime($model->startDate . " " . $model->startTime);
            // $endDateTime = User::convertSystemTime($model->startDate . " " . $model->endTime);
            $startDateTime = $model->startDate . " " . $model->startTime;
            $endDateTime = $model->startDate . " " . $model->endTime;

            $model->startDate = date('Y-m-d', strtotime($startDateTime));
            $model->endDate = $model->startDate;
            $model->startTime = date('H:i', strtotime($startDateTime));
            $model->endTime = date('H:i', strtotime($endDateTime));

            $model->imageFile = UploadedFile::getInstance($model, 'imageFile');
            $model->createdAt = User::convertSystemTime();
            $model->createdBy = Yii::$app->user->getId();
            $model->endDate = $model->endDate == "" ? $model->startDate : $model->endDate;
            $model->status = Event::PENDING;
            $model->priority = $_POST['Event']['priority'];

            $secondsDiff = strtotime($model->endDate) - (strtotime($model->startDate));
            $days = floor($secondsDiff / 3600 / 24) + 1;
            Yii::$app->appLog->writeLog("Time Different" . $timeDifferent);
            $message = Yii::t('messages', 'Event "{eventName}" created by {name} is pending for approval.', array(
                'eventName' => $model->name,
                'name' => Yii::$app->user->identity->firstName
            ));

            if ($timeDifferent > 0 && $days > 1 && $model->validate()) {
                if (null != $model->imageFile) {
                    $model->imageName = preg_replace('/\s+/', '', $model->imageFile->name); //removing all whitespace (including spaces, tabs and line ends)
                }

                if ($model->saveRecursive()) {
                    if (null != $model->imageFile) {
                        Yii::$app->toolKit->setResourceInfo();
                        @mkdir(Yii::$app->toolKit->resourcePathRelative);
                        $model->imageFile->saveAs(Yii::$app->toolKit->resourcePathRelative . $model->imageName);
                    }
                    Yii::$app->session->setFlash('success', Yii::t('messages', 'Event created'));
                    Yii::$app->appLog->writeLog("Multiple events created. Event data:" . json_encode($model->attributes));
                    Yii::$app->toolKit->sendModeratorEmails($message);
                    return $this->redirect(array('admin'));
                }
                Yii::$app->session->setFlash('error', Yii::t('messages', 'Event create failed'));
                Yii::$app->appLog->writeLog("Multiple events create failed. Event data:" . json_encode($model->attributes));

            } else {

                if (null != $model->imageFile) {
                    Yii::$app->appLog->writeLog("actionCreate");
                    $model->imageName = preg_replace('/\s+/', '', $model->imageFile->name); //removing all whitespace (including spaces, tabs and line ends)
                }

                if ($timeDifferent > 0 && $model->save(false)) {

                    if (null != $model->imageFile) {
                        Yii::$app->toolKit->setResourceInfo();
                        @mkdir(Yii::$app->toolKit->resourcePathRelative);
                        $model->imageFile->saveAs(Yii::$app->toolKit->resourcePathRelative . $model->imageName);
                    }
                    Yii::$app->session->setFlash('success', Yii::t('messages', 'Event created'));
                    Yii::$app->appLog->writeLog("Event created. Event data:" . json_encode($model->attributes));
                    Yii::$app->toolKit->sendModeratorEmails($message);

                    return $this->redirect(array('admin'));
                }

                if (strtotime($model->startTime) == strtotime($model->endTime)) {
                    Yii::$app->session->setFlash('error', Yii::t('messages', 'Please enter accurate event start and end time.'));
                } else if (strtotime($model->startTime) > strtotime($model->endTime)) {
                    Yii::$app->session->setFlash('error', Yii::t('messages', 'Please enter accurate event start and end time.'));
                } else {
                    Yii::$app->session->setFlash('error', Yii::t('messages', 'Event create failed'));
                }

                Yii::$app->appLog->writeLog("Event create failed. Event data:" . json_encode($model->attributes));
            }
        } else {
            //$lonLatData = Yii::$app->toolKit->getDefLonLat();
            $model->locationMapCordinates = Yii::$app->params['defLongLat'];
        }

        $client = User::getClientProfile();
        return $this->render('create', array(
            'model' => $model,
            'erbacModule' => $erbacModule,
            'clientFbProfile' => $client['modelFbProfile'],
            'osmMaxLimit' => $maxLimit,
            'osmCanProceed' => $osmCanProceed
        ));


    }


    /**
     * Update event status as accepted.
     * @param integer $id the ID of the model to be updated
     * @throws NotFoundHttpException
     */
    public function actionAccept($id)
    {
        $model = $this->findModel($id);

        if (null != $model) {
            $model->status = Event::ACCEPTED;

            $modelUser = User::find()->where(['userType' => User::POLITICIAN])->andWhere('id != :id', [':id' => User::PARTNER_USER_ID])->one();
            /* due to facebook is not using hided
          * $modelFbProf = FbProfile::find()->where(array('userId' => $modelUser->id))->one();
          */


            try {
                if ($model->save(false)) {

                    $params = array(
                        'eventName' => $model->name,
                        'link' => $this->getEventViewUrl($id),
                        'section' => Activity::ACT_SECTION_EVENT
                    );

                    Yii::$app->toolKit->addActivity(Yii::$app->user->id, Activity::ACT_CRT_NEW_EVENT, Yii::$app->session->get('teamId'), json_encode($params));
                    $message = Yii::t('messages', 'Event "{eventName}" created by {name} is pending for approval.', array(
                        'eventName' => $model->name,
                        'name' => Yii::$app->user->identity->firstName
                    ));

                    Yii::$app->toolKit->sendModeratorEmails($message);

                    Yii::$app->appLog->writeLog("Event accepted. Event id:{$id}, name:{$model->name}");
                    $res = array('status' => 1, 'message' => Yii::$app->toolKit->setAjaxFlash('success', Yii::t('messages', 'Event accepted. Please wait to send Invitation'), true));

                    try {
                        $model->save();
                        Yii::$app->appLog->writeLog("Event details saved");
                    } catch (Exception $e) {
                        Yii::$app->appLog->writeLog("Event details save failed.Error:{$e->getMessage()}");
                    }
                } else {
                    Yii::$app->appLog->writeLog("Event accept failed. Event id:{$id},name:{$model->name}");
                    $res = array('status' => 0, 'message' => Yii::$app->toolKit->setAjaxFlash('success', Yii::t('messages', 'Event accept failed'), true));
                }
            } catch (Exception $e) {
                Yii::$app->appLog->writeLog("Event accept failed. Event id:{$id},name:{$model->name},Error:{$e->getMessage()}");
                $res = array('status' => 0, 'message' => Yii::$app->toolKit->setAjaxFlash('success', Yii::t('messages', 'Event accept failed'), true));
            }
            echo Json::encode($res);
        }
    }

    /**
     * @param $q
     * @return string
     * @throws \Exception
     */
    public function actionConfirm($q)
    {
        $json = base64_decode($q);
        $data = json_decode($json, true);
        $id = $data['event'];
        $member = $data['member'];
        $confirm = $data['invitation'];
        $model = EventUser::findOne(['eventId' => $id, 'userId' => $member]);
        $status = 'failed';
        $msg = "";
        $type = 'error';
        if (!is_null($model)) {

            if ($confirm == EventUser::ATTENDING) {
                $model->rsvpStatus = EventUser::ATTENDING;
            } elseif ($confirm == EventUser::UNSURE) {
                $model->rsvpStatus = EventUser::UNSURE;
            } else {
                $model->rsvpStatus = EventUser::DECLINED;
            }

            if (isset($model->updatedDateTime)) {
                $model->updatedDateTime = User::convertSystemTime();
            }

            if ($model->save(false)) {
                $status = 'success';
                $type = 'success';
                $msg = "Successfully update your confirmation.";
                $eventModel = Event::findOne($id);
                if (null != $eventModel) {
                    if (EventUser::ATTENDING == $model->rsvpStatus) {
                        $res = User::updateKeyword($model->userId, $eventModel->advanceKeyword);
                        Yii::$app->appLog->writeLog("User rsvpStatus updated:ATTENDING  Data-: User:{$model->userId}, Keyword:{$eventModel->advanceKeyword}");

                    } elseif (EventUser::UNSURE == $model->rsvpStatus) {
                        $res = User::updateKeyword($model->userId, $eventModel->advanceKeyword);
                        Yii::$app->appLog->writeLog("User rsvpStatus updated:UNSURE  Data-: User:{$model->userId}, Keyword:{$eventModel->advanceKeyword}");
                    } else {
                        $res = User::deleteKeyword($model->userId, $eventModel->advanceKeyword);
                        Yii::$app->appLog->writeLog("User keywords deleted Data-: User:{$model->userId}, Keyword:{$eventModel->advanceKeyword}");
                    }
                }
                return $this->renderPartial('thankYouTemplate');
            } else {
                $msg = "Failed to save your confirmation.";
            }
        } else {
            $msg = "Failed to update your confirmation.";
        }
        Yii::$app->appLog->writeLog($msg . " Data-: Event:{$id}, User:{$member}");
    }


    /**
     * @return string
     */
    public function actionPreview()
    {
        $erbacModule = WebUser::className();
        $code = $_GET['code'];
        $domain = $_SERVER['SERVER_NAME'];
        $appid = Yii::$app->toolKit->getAppIdByDomain($domain);
        $json = base64_decode($code);
        $data = json_decode($json, true);
        $id = $data['event'];
        $eventModel = Event::find()->where(['=', 'id', $id])->one();
        $client = User::getClientProfile();
        return $this->render('preview', array(
            'model' => $eventModel,
            'erbacModule' => $erbacModule,
            'clientFbProfile' => $client['modelFbProfile'],
            'appId' => $appid['appId']
        ));

    }

    /**
     * Updates a particular model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id the ID of the model to be updated
     * @return string|Response
     * @throws NotFoundHttpException
     * @throws ExitException
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);
        // $startDateTime = User::convertSystemTime($model->startDate . " " . $model->startTime);
        // $endDateTime = User::convertSystemTime($model->startDate . " " . $model->endTime);
        $startDateTime = $model->startDate . " " . $model->startTime;
        $endDateTime = $model->endDate . " " . $model->endTime;
        $model->endDate = date('Y-m-d', strtotime($endDateTime));
        $model->startDate = date('Y-m-d', strtotime($startDateTime));
        $model->endTime = date('H:i', strtotime($endDateTime));
        $model->startTime = date('H:i', strtotime($startDateTime));
        $thresholdChecker = new ThresholdChecker(Yii::$app->session->get('packageType'));
        $maxLimit = $thresholdChecker->getRemainingCount(ThresholdChecker::GEO_TAGGING_LIMIT);
        $OsmLog = new OsmLog();
        $osmCanProceed = $OsmLog->checkLimit($maxLimit);

        if ($model != null) {
            $model->endDate = $model->endDate == Event::DEFAULT_DATE ? '' : $model->endDate;
        }
        $this->performAjaxValidation($model);
        Yii::$app->toolKit->setResourceInfo();
        if (isset($_POST['removeImage'])) {
            try {
                $path = Yii::$app->toolKit->resourcePathAbsolute;
                $model->imageName = new Expression('NULL');
                if ($model->save(false)) {
                    Yii::$app->appLog->writeLog("Image removed.");
                    Yii::$app->session->setFlash('success', Yii::t('messages', 'Image removed.'));
                    return $this->redirect(array('update', 'id' => $id));
                } else {
                    Yii::$app->appLog->writeLog("Image remove failed.");
                    Yii::$app->session->setFlash('error', Yii::t('messages', 'Image remove failed.'));
                }
            } catch (Exception $e) {
                Yii::$app->appLog->writeLog("Image remove failed. Error:{$e->getMessage()}");
                Yii::$app->session->setFlash('error', Yii::t('messages', 'Image remove failed.'));
            }
        } else if (isset($_POST['Event'])) {
            $base_url = Yii::$app->request->getBaseUrl(true);
            $model->attributes = $_POST['Event'];
            $input_description = $model->description;
            $model->description = str_replace('src="../../..', 'src="' . $base_url, $input_description);
            $interval = strtotime($model->startDate . " " . $model->endTime) - strtotime($model->startDate . " " . $model->startTime);
            $timeDifferent = floor($interval / (3600));
            // $startDateTime = User::convertSystemTime($model->startDate . " " . $model->startTime);
            // $endDateTime = User::convertSystemTime($model->startDate . " " . $model->endTime);
            $startDateTime = $model->startDate . " " . $model->startTime;
            $endDateTime = $model->startDate . " " . $model->endTime;
            $model->endDate = date('Y-m-d', strtotime($endDateTime));
            $model->startDate = date('Y-m-d', strtotime($startDateTime));
            $model->endTime = date('H:i', strtotime($endDateTime));
            $model->startTime = date('H:i', strtotime($startDateTime));
            $model->imageFile = UploadedFile::getInstance($model, 'imageFile');
            $model->status = Event::PENDING;
            if (null != $model->imageFile) {
                $model->imageName = preg_replace('/\s+/', '', $model->imageFile->name); //removing all whitespace (including spaces, tabs and line ends)
            }

            Yii::$app->appLog->writeLog("Time Different" . $timeDifferent);
            if ($timeDifferent > 0 && $model->save(false)) {
                if (null != $model->imageFile) {
                    Yii::$app->toolKit->setResourceInfo();
                    @mkdir(Yii::$app->toolKit->resourcePathRelative);
                    $model->imageFile->saveAs(Yii::$app->toolKit->resourcePathRelative . $model->imageName);
                }
                Yii::$app->appLog->writeLog("Event updated. Event data:" . json_encode($model->attributes));
                Yii::$app->session->setFlash('success', Yii::t('messages', 'Event updated'));
                return $this->redirect(array('admin'));
            }
            // Yii::$app->session->setFlash('error', Yii::t('messages', 'Event update failed'));
            Yii::$app->appLog->writeLog("Event update failed. Event data:" . json_encode($model->attributes));
        }

        $client = User::getClientProfile();

        return $this->render('update', array(
            'model' => $model,
            'clientFbProfile' => $client['modelFbProfile'],
            'osmMaxLimit' => $maxLimit,
            'osmCanProceed' => $osmCanProceed
        ));
    }


    /**
     * Deletes a particular model.
     * If deletion is successful, the browser will be redirected to the 'admin' page.
     * @param integer $id the ID of the model to be deleted
     * @throws NotFoundHttpException
     * @throws Throwable
     * @throws StaleObjectException
     */
    public function actionDelete($id)
    {
        $model = $this->findModel($id);

        $modelUser = User::find()->where(['userType' => User::POLITICIAN])->andWhere('id != :id', [':id' => User::PARTNER_USER_ID])->one();

        /* due to facebook is not using hided
         * $modelFbProf = FbProfile::find()->where(array('userId' => $modelUser->id))->one();
         */


        if ($model->delete()) {
            EventUser::deleteAll(['eventId' => $model->id]);

            // Add activity
            $params = array(
                'eventName' => $model->name,
            );
            Yii::$app->toolKit->addActivity(
                Yii::$app->user->id, Activity::ACT_DEL_EVENT, Yii::$app->session->get('teamId'), json_encode($params)
            );
            // End
            Yii::$app->session->setFlash('success', Yii::t('messages', 'Event Deleted'));
        } else {
            Yii::$app->appLog->writeLog("Event delete failed. Event data:" . json_encode($model->attributes));
            Yii::$app->session->setFlash('error', Yii::t('messages', 'Event Delete Failed'));
        }
    }

    public function actionCalendarEvents()
    {
        // This method is an ajax call where 2 arguments will be passed into the method via $_GET['start'] and $_GET['end']
        $_GET['Event']['startDate'] = empty($_GET['Event']['startDate']) ? date("Y-m-d", $_GET['start']) : $_GET['Event']['startDate'];
        $_GET['Event']['endDate'] = empty($_GET['Event']['endDate']) ? date("Y-m-d", $_GET['end']) : $_GET['Event']['endDate'];


        $model = new Event();
        $model->scenario = 'search';

        if (isset($_GET['Event'])) {
            Yii::$app->appLog->writeLog('Search calendar events. Criteria:' . json_encode($_GET['Event']));
            $model->attributes = $_GET['Event'];
            $model->updatedBy = $_GET['Event']['updatedBy'];
            $model->createdBy = $model->updatedBy;
            $model->updatedBy = '';
        }


        $eventSearch = new EventSearch();
        $dataProvider = $eventSearch->searchEvent(Yii::$app->request->queryParams);
        $events = $dataProvider->getModels();
        $items = array();
        foreach ($events as $event) {
            $startDateTime = User::convertDBTime($event->startTimeStamp);
            $endDateTime = User::convertDBTime($event->endTimeStamp);
            $items[] = array(
                'id' => $event->id,
                'title' => $event->name,
                'start' => $startDateTime,
                'end' => $endDateTime,
                'allDay' => $event->eventDuration('allday'),
                'editable' => true,
                'color' => $event->eventPriority(),
                'className' => $event->status == Event::REJECTED ? 'event-rejected' : '',
            );
        }
        Yii::$app->appLog->writeLog('Calendar events count:' . count($items));
        echo Json::encode($items);
        Yii::$app->end();
    }

    /**
     * @param $term
     */
    public function actionEventOwner($term)
    {

        $models = User::findAll((new Query())
            ->select(['t.*'])
            ->from('User t')
            ->where(['like', 't.firstName', $term . '%', false])
            ->orWhere(['like', 't.lastName', $term . '%', false])
            ->innerJoin('Event', 'Event.createdBy=t.id')
            ->groupBy('t.id')
            ->limit(10)->all());

        $users = array();
        foreach ($models as $model) {
            $users[] = array(
                'id' => $model->id,
                'value' => $model->getName(),
                'label' => $model->getName(),
            );
        }

        echo json_encode($users);
    }


    /**
     * Finds the Event model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Event the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Event::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }


    public function actionGetExportFile()
    {
        $this->actionExport();
        // get the parameters
        $id = $_GET['id'];
        $key = $_GET['key'];

        // setting the random key
        $randomString = rand();
        $fileName = $randomString . '_export.csv'; // file name

        //send file to export and save
        Yii::$app->response->sendContentAsFile(Yii::$app->session->get('export'), $fileName, ['mimeType' => 'csv', 'inline' => false]);
        Yii::$app->session->set('export', null);

    }


    public function actionExport()
    {
        $id = $_GET['id'];
        $key = $_GET['key'];

        $firstName = (isset($_GET['firstName']) && $_GET['firstName'] != "undefined") ? $_GET['firstName'] : '';
        $lastName = (isset($_GET['lastName']) && $_GET['lastName'] != "undefined") ? $_GET['lastName'] : '';
        $email = (isset($_GET['email']) && $_GET['email'] != "undefined") ? $_GET['email'] : '';

        $fp = fopen('php://temp', 'w');
        $headers = array();

        $query = new Query();
        $query->select(['eu.*', 'u.*'])
            ->from('User u')
            ->innerJoin('EventUser eu', 'eu.userId=u.id')
            ->where(['=', 'eu.eventId', $id]);

        if ($firstName) {
            $query->andFilterWhere(['like', 'u.firstName', '%' . $firstName . '%', false]);
        }
        if ($lastName) {
            $query->andWhere(['like', 'u.lastName', '%' . $lastName . '%', false]);
        }
        if ($email) {
            $query->andWhere(['like', 'u.email', '%' . $email . '%', false]);
        }

        $query->andWhere(['=', 'eu.rsvpStatus', $key])
            ->andWhere(['=', 'eu.isDigiInvite', Event::EMAIL]);
        /*
        * Init dataProvider for first page
        */
        if ($key == 0) {
            $headers = [
                Yii::t('messages', 'firstName'),
                Yii::t('messages', 'lastName'),
                Yii::t('messages', 'email'),
                Yii::t('messages', 'Email Count'),
                Yii::t('messages', 'Invite Count'),
            ];
        } else if ($key == 3) {
            $headers = [
                Yii::t('messages', 'firstName'),
                Yii::t('messages', 'lastName'),
                Yii::t('messages', 'email'),
                Yii::t('messages', 'Email Count'),
                Yii::t('messages', 'Participate'),
            ];
        } else {
            $headers = [
                Yii::t('messages', 'firstName'),
                Yii::t('messages', 'lastName'),
                Yii::t('messages', 'email'),
                Yii::t('messages', 'Email Count'),
                Yii::t('messages', 'Invite Count'),
            ];
        }

        fputcsv($fp, $headers);

        $members = $query->all();

        foreach ($members as $member) {
            $emailCount = EventReminderTracker::getCount($id, $member['userId'], EventReminder::REMINDER);
            $invitationCount = EventReminderTracker::getCount($id, $member['userId'], EventReminder::EVENT_INVITATION);
            $row = array();
            if ($key == 0) {
                $row = array($member['firstName'], $member['lastName'], $member['email'], $emailCount, $invitationCount);
            } else if ($key == 3) {
                if (isset($member['confirmed']) AND $member['confirmed'] == EventUser::PRESENT) {
                    $row = array($member['firstName'], $member['lastName'], $member['email'], $emailCount, Yii::t('messages', 'Yes'));
                } else {
                    $row = array($member['firstName'], $member['lastName'], $member['email'], $emailCount, Yii::t('messages', 'No'));
                }
            } else {
                $row = array($member['firstName'], $member['lastName'], $member['email'], $emailCount, $invitationCount);
            }
            fputcsv($fp, $row);
        }
        /*
         * save csv content to a Session
         */
        rewind($fp);
        Yii::$app->session->set('export', stream_get_contents($fp));
        fclose($fp);
    }

    /**
     * Create resource viewing url.
     * @param integer $id Resource id
     * @return string
     */
    private function getEventViewUrl($id)
    {
        return Url::to(['event/view', 'id' => $id]);
    }

    /**
     * @param $fileName
     * @param null $eventID
     * @param $tempDescription
     * @return string
     * @throws NotFoundHttpException
     */
    public function actionGetTemplateContent($fileName, $eventID = null, $tempDescription)
    {
        if (!ToolKit::isEmpty($eventID)) {
            $model = $this->findModel($eventID);
            //Show edited description
            $model->description = $tempDescription;
        } else {
            $model = new Event();
            $model->id = null;
            //Show edited description
            $model->description = $tempDescription;
        }

        return $this->renderPartial("emailTemplates/{$fileName}", array('model' => $model));
    }

    /**
     * Performs the AJAX validation.
     * @param  $model
     * @throws ExitException
     */
    protected function performAjaxValidation($model)
    {
        if (isset($_POST['ajax']) && $_POST['ajax'] === 'activity-form') {
            echo ActiveForm::validate($model);
            Yii::$app->end();
        }
    }
}
