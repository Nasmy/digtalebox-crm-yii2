<?php
/**
 * Created by PhpStorm.
 * User: nasmy
 * Date: 7/26/2019
 * Time: 1:56 PM
 */

namespace app\components;

use app\models\App;
use app\models\AuthAssignment;
use app\models\AuthItem;
use app\models\User;
use app\modules\rbac\RbacModule;
use Yii;
use app\models\AuthItemChild;
use yii\web\IdentityInterface;

/**
 * Class WebUser.
 *
 * This class illustrate Identity of the user
 *
 * @author : Nasmy Ahamed
 * Date: 7/22/2019
 * @copyright Copyright &copy; Keeneye solutions (PVT) LTD
 */
class WebUser extends \yii\web\User
{

    public $isSuperAdmin = false;
    /**
     * Super administrator role name
     */
    const SUPERADMIN_ROLE_NAME = 'superadmin';
    const POLITICIAN_ROLE_NAME = 'politician';
    const POLITICIAN_ADMIN_ROLE_NAME = 'politicianAdmin';
    const TEAM_LEAD_ROLE_NAME = 'teamLead';
    const SUPPORTER_ROLE_NAME = 'supporter';
    const SUPPORTER_WITHOUT_TEAM = 'SupporterWithoutTeam';
    const DELETED_TEAM_MEMBER = 'deletedTeamMember';
    const REGIONAL_ADMIN_NAME = 'regionalAdmin';
    const RESOURCE='Resource';
    public $errorCode = false;



    public function can($permissionName, $params = [], $allowCaching = true)
    {

        try {
            $userRole = Yii::$app->session->get('login_user_role');
            if (isset($userRole)) {
                $rolePermission = AuthItemChild::findOne(['parent' => $userRole, 'child' => $permissionName]);
                if ($rolePermission) {
                    return true;
                }
            }

        } catch (\Exception $e) {
              return false;
        }

        return false;
    }

    public function CheckUserType($role)
    {
        try {
            $userRole = Yii::$app->session->get('login_user_role');
            if ($userRole==$role) {
                return true;
            }

        } catch (\Exception $e) {
            return false;
        }

        return false;
    }

    /**
     * This method is called after the user is successfully logged in.
     * The default implementation will trigger the [[EVENT_AFTER_LOGIN]] event.
     * If you override this method, make sure you call the parent implementation
     * so that the event is triggered.
     * @param IdentityInterface $identity the user identity information
     * @param bool $cookieBased whether the login is cookie-based
     * @param int $duration number of seconds that the user can remain in logged-in status.
     * If 0, it means login till the user closes the browser or the session is manually destroyed.
     */
    public function afterLogin($identity, $cookieBased, $duration)
    {
        parent::afterLogin($identity, $cookieBased, $duration); // TODO: Change the autogenerated stub
        $authItemModel = new AuthItem();
        $assignedItems = $authItemModel->getAssignedItems(Yii::$app->user->id, true);
        Yii::$app->session->set('is_super_admin', false);
        Yii::$app->session->set('user_identity', $identity);
        if (in_array(self::SUPERADMIN_ROLE_NAME, $assignedItems)) {
            Yii::$app->session->set('is_super_admin', true);
        }
        Yii::$app->session->set('login_user_role', implode(",", $assignedItems));
    }

    /**
     * This method is called before logging in a user.
     * The default implementation will trigger the [[EVENT_BEFORE_LOGIN]] event.
     * If you override this method, make sure you call the parent implementation
     * so that the event is triggered.
     * @param IdentityInterface $identity the user identity information
     * @param bool $cookieBased whether the login is cookie-based
     * @param int $duration number of seconds that the user can remain in logged-in status.
     * If 0, it means login till the user closes the browser or the session is manually destroyed.
     * @return bool whether the user should continue to be logged in
     */
    public function beforeLogin($identity, $cookieBased, $duration)
    {
        $appData = Yii::$app->toolKit->getAppData();
        $packageData = Yii::$app->toolKit->getPackageData($appData['packageType']);
        if ($identity->id == -2) {
            Yii::$app->session->set('isPartner', 1);
        } else {
            Yii::$app->session->set('isPartner', 0);
        }
        Yii::$app->session->set('packageType', $appData['packageType']);
        Yii::$app->session->set('masterUserId', $appData['masterUserId']);
        Yii::$app->session->set('packageTypeId', $packageData['PackageTypeId']);
        Yii::$app->session->set('renewDate', $appData['renewDate']);
        Yii::$app->session->set('renewedDate', $appData['renewedDate']);
        Yii::$app->session->set('smsPackageType', $appData['smsPackageType']);
        Yii::$app->session->set('isDefaultApp', $appData['isDefault']);
        return parent::beforeLogin($identity, $cookieBased, $duration); // TODO: Change the autogenerated stub
    }


    /**
     * @param $operation
     * @param array $params
     * @param bool $allowCaching
     * @return bool
     */
    public static function checkAccess($operation, $params = array(), $allowCaching = true)
    {
        return Yii::$app->session->get('is_super_admin') === true ? true : Yii::$app->user->can($operation, $params, $allowCaching);
    }


    /**
     * @param $operation
     * @return bool
     */
    public static function checkPackageAccess($operation)
    {
        $packagePermissions = array();
        $authModel = new AuthItem();
        switch (Yii::$app->session->get('packageTypeId')) {
            case App::FREEMIUM:
                $packagePermissions = $authModel->freemiumPermissions;
                break;
            case App::CM: // Community Management
                $packagePermissions = $authModel->cmPermissions;
                break;
        }


        if (empty($packagePermissions)) {
            return true; // OC package
        } else {
            $itemParts = explode('.', $operation);
            $item = '';
            for ($i = 0; $i < count($itemParts) - 1; $i++) {
                $item .= $itemParts[$i] . '.';
            }
            $item = rtrim($item, '.') . '*';
            if (preg_grep("/{$item}/i", $packagePermissions) || preg_grep("/{$operation}/i", $packagePermissions)) {
                return true;
            }
        }

        return false;
    }


    /**
     * @param array $operations
     * @return bool
     */
    public function checkAccessList($operations = array())
    {
        foreach ($operations as $_operation) {
            if ($this->checkAccess($_operation)) {
                return true;
            }
        }
        return false;
    }

    /**
     * Retrieve assigned items of the user.
     * @param integer $userId Id of the user
     * @param boolean $key if key is true then return item names, otherwise return item description
     * @param integer $type Item type whether role or permission
     * @return array Assigned items.
     */
    public static function getAssignedItems($userId, $key = false, $type = AuthItem::TYPE_ROLE)
    {
        $model = new AuthAssignment();
        $items = AuthAssignment::find()->where('userid = :userid')->params([':userid' => $userId])->with('authItems')->all();
        $assignedItems = array();

        if (null != $items) {
            foreach ($items as $item) {
                $assignedItems[] = $key ? $item->itemname : $item->authItems[0]->description;
            }
        }
        return $assignedItems;
    }

    public function getRoles() {
        $currentUserRole = Yii::$app->session->get('login_user_role');
        $politician = User::find()->where(['userType' => 1, 'isSysUser' => 1])->andWhere(['!=', 'id', '-2'])->count();
        switch ($currentUserRole) {
            case self::SUPERADMIN_ROLE_NAME:
            case self::POLITICIAN_ROLE_NAME:
                if($politician >= 1) {
                    $exceptRoles = array(WebUser::POLITICIAN_ROLE_NAME);
                } else {
                    $exceptRoles = array();
                }
                break;
            default:
                $exceptRoles = array(WebUser::SUPPORTER_ROLE_NAME, WebUser::TEAM_LEAD_ROLE_NAME, WebUser::SUPPORTER_ROLE_NAME, WebUser::SUPPORTER_WITHOUT_TEAM, WebUser::DELETED_TEAM_MEMBER);
            // TODO needs to do this implementations
        }

        return $this->getItemOptions(AuthItem::TYPE_ROLE, $exceptRoles);
    }


    /**
     * Retrieve items by item type.This will not return system default super admin role
     * @param integer $type Authitem type
     * @param array $except Items that should not included
     * @return array items.
     */
    public function getItemOptions($type = AuthItem::TYPE_ROLE, $except = array())
    {
        $items = AuthItem::find()->where('type=:type AND name != :name')->params([':type' => $type, ':name' => self::SUPERADMIN_ROLE_NAME])->all();
        $itemOptions = array();

        if (null != $items) {
            foreach ($items as $item) {
                if (!in_array($item->name, $except)) {
                    $itemOptions[$item->name] = $item->name;
                }
            }
        }
        return $itemOptions;
    }

    /**
     * Retrieve items by user role .This will not return role permissions
     * @param $feature
     * @return bool
     */
    public function checkUserPermissions($feature)
    {
        $userRole = Yii::$app->session->get('login_user_role');
        if (isset($userRole)) {
            $rolePermission = AuthItemChild::find()->where(['=','parent',$userRole])->where(['like','child',$feature])->one();
            if ($rolePermission) {
                return true;
            }
            else{
                return false;
            }
        }
    }
}
