<?php

namespace app\controllers;

use app\components\Bitly;
use app\components\FacebookApi;
use app\components\LinkedInApi;
use app\components\ThresholdChecker;
use app\components\ToolKit;
use app\components\TwitterApi;
use app\components\View;
use app\components\WebUser;
use app\controllers\WebUserController;
use app\models\Activity;
use app\models\AuthAssignment;
use app\models\Country;
use app\models\CustomField;
use app\models\CustomType;
use app\models\CustomValue;
use app\models\FbProfile;
use app\models\Feed;
use app\models\LnProfile;
use app\models\TwProfile;
use app\models\User;
use kartik\date\DatePicker;
use Mailchimp\MailChimpApi;
use Mailchimp\MC_OAuth2Client;
use MailchimpOAuth\MC_RestClient;
use Yii;
use app\models\CandidateInfo;
use yii\db\Exception;
use yii\helpers\Html;
use yii\helpers\Json;
use yii\helpers\Url;
use yii\widgets\ActiveForm;
use borales\extensions\phoneInput\PhoneInput;

/**
 * Class SighupController
 * @package app\controllers
 */
class SignupController extends WebUserController
{

    /**
     * @var string the default layout for the views. Defaults to '//layouts/column2', meaning
     * using two-column layout. See 'protected/views/layouts/column2.php'.
     */
    public $layout = 'init';

    /**
     * Returns a list of behaviors that this component should behave as.
     *
     * Child classes may override this method to specify the behaviors they want to behave as.
     *
     * The return value of this method should be an array of behavior objects or configurations
     * indexed by behavior names. A behavior configuration can be either a string specifying
     * the behavior class or an array of the following structure:
     *
     * ```php
     * 'behaviorName' => [
     *     'class' => 'BehaviorClass',
     *     'property1' => 'value1',
     *     'property2' => 'value2',
     * ]
     * ```
     *
     * Note that a behavior class must extend from [[Behavior]]. Behaviors can be attached using a name or anonymously.
     * When a name is used as the array key, using this name, the behavior can later be retrieved using [[getBehavior()]]
     * or be detached using [[detachBehavior()]]. Anonymous behaviors can not be retrieved or detached.
     *
     * Behaviors declared in this method will be attached to the component automatically (on demand).
     *
     * @return array the behavior configurations.
     */
    public function behaviors()
    {
        return [

        ];
    }


    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
            'auth' => [
                'class' => 'yii\authclient\AuthAction',
                'successCallback' => [$this, 'successCallback'],
            ],
        ];
    }


    public function successCallback($client)
    {
        $attributes = $client->getUserAttributes();
        return $attributes;
        // user login or signup comes here
    }

    /**
     * {@inheritdoc}
     * @throws \yii\web\BadRequestHttpException
     */
    public function beforeAction($action)
    {
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * @return string
     */
    public function allowed()
    {
        $allowed = '*';
        return $allowed;
    }

    /**
     * Start user signup process.
     */
    public function actionStep1()
    {
        $this->layout = 'signup';
        $model = CandidateInfo::find()->all();
        $userModal = new User();
        $profImageUrl = "http://placehold.it/{$model[0]->imgWidth}x{$model[0]->imgWidth}";


        if (null == $model) {
            Yii::$app->session->setFlash('error', Yii::t('messages', 'Error occur while accessing signup page. Try again later'));
            $this->redirect(array('site/init'));
        }
        $appData = Yii::$app->toolKit->getAppData();
        $tc = new ThresholdChecker($appData['packageType'], $appData['smsPackageType']);
        if ($tc->isThresholdExceeded(ThresholdChecker::EMAIL_CONTACTS)) {
            Yii::$app->session->setFlash('warning', Yii::t('messages', 'New user signup process temporarily stopped. Please try again later.'));
            Yii::error("User signup restricted. Reached maximum email contacts.");
            $this->redirect(array('site/init'));
        }

        $clientProfiles = $userModal->getClientProfile();
        Yii::$app->toolKit->setResourceInfo();
        if ("" != $model[0]->profImageName) {
            $profImageUrl = Url::base() . '/' . Yii::$app->toolKit->resourcePathRelative . $model[0]->profImageName;
        }

        $shareUri = str_replace('{domain}', Yii::$app->toolKit->domain, Yii::$app->params['absUrl']) . '/Signup/Step1';
        $shareByEmailDetails = array('subject' => Yii::t('messages', 'DigitaleBox Volunteer'), 'body' => Yii::t('messages', 'Volunteer Sign Up: ') . " " . $shareUri);
        return $this->render('signup_step_1', array(
            'model' => $model,
            'profImageUrl' => $profImageUrl,
            'shareUri' => $shareUri,
            'shareByEmailDetails' => $shareByEmailDetails,
            'clientName' => $clientProfiles['modelUser']->getName()
        ));
    }

    /**
     * Second step of user signup. Redirects to relavant social network
     * @param integer $network Network identifier.
     * @return \yii\web\Response
     */
    public function actionStep2($network)
    {
        switch ($network) {
            case TwitterApi::TWITTER:
                $callbackUrl = sprintf(Yii::$app->params['twitter']['callback_url'], TwitterApi::TWITTER, Yii::$app->toolKit->domain);
                $connection = new TwitterApi();
                $requestToken = $connection->getRequestToken(urlencode($callbackUrl));

                if ('true' == $requestToken['oauth_callback_confirmed']) {
                    Yii::$app->session->set('oauth_token', $requestToken['oauth_token']);
                    Yii::$app->session->set('oauth_token_secret', $requestToken['oauth_token_secret']);

                    switch ($connection->http_code) {
                        case 200:
                            // Build authorize URL and redirect user to Twitter.
                            $url = $connection->getAuthorizeURL($requestToken['oauth_token'], true);
                            return $this->redirect($url);
                            break;
                        default:
                            Yii::error("Could not connect to Twitter");
                            Yii::$app->session->setFlash('error', Yii::t('messages', 'Could not connect to Twitter'));
                    }
                }
                break;
            case LinkedInApi::LINKEDIN:

                // Yii::$app->appLog->writeLog("Going to authenticate with LinkedIn");

                $isSecure = Yii::$app->request->isSecureConnection;
                $isStaging = Yii::$app->toolKit->isStaging();
                $url = Yii::$app->params['linkedIn']['callbackUrl'];
                $li = new LinkedInApi();

                $isSecure = $isSecure ? 1 : 0;
                //set permissions for available api permissions.

                $redirectUri = $li->getLoginUrl(array(
                    LinkedInApi::SCOPE_LITE_PROFILE,
                    LinkedInApi::SCOPE_EMAIL_ADDRESS,
                    LinkedInApi::SCOPE_READ_WRITE_COMPANY_ADMIN,
                    LinkedInApi::SCOPE_POST_COMMENTS_LIKES,
                    LinkedInApi::SCOPE_READ_COMPANY_POST,
                    LinkedInApi::SCOPE_READ_WRITE_COMPANY,

                ), uniqid() . '$$' . Yii::$app->toolKit->domain . '$$' . $isSecure
                );

                /*    if (Yii::$app->session->get('linked_in_status') == 1) {
                        //create url for all api permissions
                        $redirectUri = $li->getLoginUrl(array(
                            LinkedInApi::SCOPE_LITE_PROFILE,
                            LinkedInApi::SCOPE_EMAIL_ADDRESS,
                            LinkedInApi::SCOPE_SHARE_CONTENTS,
                            LinkedInApi::SCOPE_READ_WRITE_COMPANY_ADMIN,
                            LinkedInApi::SCOPE_POST_COMMENTS_LIKES,
                            LinkedInApi::SCOPE_READ_COMPANY_POST,
                            LinkedInApi::SCOPE_READ_WRITE_COMPANY,
                        ), uniqid() . '$$' . Yii::$app->toolKit->domain . '$$' . $isSecure
                        );
                    } else {
                        //create url for default api permissions
                        $redirectUri = $li->getLoginUrl(array(
                            LinkedInApi::SCOPE_LITE_PROFILE,
                            LinkedInApi::SCOPE_EMAIL_ADDRESS,
                            LinkedInApi::SCOPE_READ_WRITE_COMPANY_ADMIN,
                            LinkedInApi::SCOPE_POST_COMMENTS_LIKES,
                        ), uniqid() . '$$' . Yii::$app->toolKit->domain . '$$' . $isSecure
                        );
                    }*/

                if (!$isStaging) {
                    $redirectUri = str_replace('http://', 'https://', urldecode($redirectUri));
                }

                Yii::error("LinkedIn redirectUri" . $redirectUri);
                return $this->redirect($redirectUri);
                break;
            case FacebookApi::FACEBOOK:
                Yii::error("Going to authenticate with Facebook");


                $isSecure = Yii::$app->request->isSecureConnection;
                $url = sprintf(Yii::$app->params['facebook']['redirectUri'], Yii::$app->toolKit->domain, FacebookApi::FACEBOOK);
                if ($isSecure)
                    $url = str_replace('http://', 'https://', $url);

                return $this->redirect(Yii::$app->facabook->getLoginUrl(array(
                    'display' => 'popup',
                    'scope' => implode(",", Yii::$app->params['facebook']['loginScope']),
                    'redirect_uri' => $url,
                )));

                break;

            case MailChimpApi::MAILCHIMP:
                $isSecure = Yii::$app->request->isSecureConnection;
                $isStaging = Yii::$app->toolKit->isStaging();
                $url = Yii::$app->params['mailchimp']['callbackUri'];

                if (!$isStaging) {
                    $url = str_replace('http://', 'https://', $url);
                }
                $isSecure = $isSecure ? 1 : 0;
                $state = Yii::$app->toolKit->domain . '|' . $isSecure;

                $mcOauth = new MC_OAuth2Client(
                    Yii::$app->params['mailchimp']['clientId'], Yii::$app->params['mailchimp']['clientSecret'], $url . '?state=' . $state
                );

                $redirectUri = $mcOauth->getLoginUri();
                Yii::error("action step2:" . $redirectUri);
                return $this->redirect($redirectUri);

                break;
            case Bitly::BITLY:

                $isSecure = Yii::$app->request->isSecureConnection;
                $isStaging = Yii::$app->toolKit->isStaging();
                $url = Yii::$app->params['blyApi']['callbackUrl'];

                if (!$isStaging) {
                    $url = str_replace('http://', 'https://', $url); // TODO: for staging apps, this should not be https
                }

                $blyApi = new Bitly(Yii::$app->params['blyApi']['clientId'], Yii::$app->params['blyApi']['clientSecret']);
                $isSecure = $isSecure ? 1 : 0;
                $state = uniqid() . '|' . Yii::$app->toolKit->domain . '|' . $isSecure;
                $redirectUri = $blyApi->getLoginUrl($url, $state);
                return $this->redirect($redirectUri);
                break;

            default:
                Yii::error("Invalid signup request");
                return $this->redirect(array('signup/step1'));
                break;
        }
    }

    /**
     * Third step of user signup. Collect user information such as phone number, email etc..
     * @param integer $network Network identifier.
     * @return string|\yii\web\Response
     */
    public function actionStepThree($network)
    {
        $this->layout = 'signup';
        $model = new User();
        $customModel = new CustomValue();
        $model->scenario = 'signup';

        $customFields = $customModel->getCustomData(CustomType::CF_PEOPLE, 0, CustomField::ACTION_CREATE, ToolKit::post('CustomValue'), CustomType::CF_SUB_VOLUNTEER_SIGN_UP);
        $this->performAjaxValidation($model, 'user-form', $customFields);
        $availableFields = array();
        $formFields = array();
        switch ($network) {
            case TwitterApi::TWITTER:

                if (!isset(Yii::$app->session['tw_prof_info'])) {
                    // Create connection from authenticated user`s tokens
                    $connection = new TwitterApi();
                    $twProfInfo = $connection->get(TwitterApi::VERIFY_CREDENTIALS);

                    // Check whether user has already being authenticated with twitter and followed sign up process
                    $twModel = TwProfile::find()->where(['twUserId' => $twProfInfo->id_str])->one();
                    if (null != $twModel) {
                        $model = User::find()->where(['id' => $twModel->userId])->one();
                        if (1 == $model->signup) {
                            Yii::error("Already authenticated with Twitter");
                            Yii::$app->session->setFlash('success', Yii::t('messages', 'You have already authenticated with Twitter.'));
                            $this->redirect(array('signup/step1'));
                        } else {
                            Yii::error("Has a twitter profile. May have collected via automated processes.");
                            Yii::$app->session->set('userId', $twModel->userId);
                            Yii::$app->session->set('twProfId', $twModel->twUserId);
                        }
                    }

                    // Save Twitter profile details on session. We have to save it database later.
                    Yii::$app->session['tw_prof_info'] = $twProfInfo;
                } else {
                    $twProfInfo = Yii::$app->session['tw_prof_info'];
                }

                // Just set values to twitter profile model. save later
                $modelTwProf = new TwProfile();

                if (Yii::$app->session['twProfId']) {
                    // We collected twitter info by cron, such user going to authenticate
                    // So already has a record in both user and twprofile table
                    $modelTwProf = TwProfile::find()->where(['twUserId' => Yii::$app->session['twProfId']])->one();
                }

                $modelTwProf->twUserId = $twProfInfo->id_str;
                $modelTwProf->name = $twProfInfo->name;
                $modelTwProf->screenName = $twProfInfo->screen_name;
                $modelTwProf->authToken = Yii::$app->session['oauth_token'];
                $modelTwProf->authTokenSecret = Yii::$app->session['oauth_token_secret'];
                $modelTwProf->location = $twProfInfo->location;
                $modelTwProf->profileImageUrl = $twProfInfo->profile_image_url;
                $modelTwProf->followerCount = $twProfInfo->followers_count;
                $modelTwProf->friendsCount = $twProfInfo->friends_count;
                $modelTwProf->createdAt = date('Y-m-d H:i:s', strtotime($twProfInfo->created_at));

                // If user has already signed up with other network. We skip signup details collection
                // Just store particular network profile data
                if (!empty(Yii::$app->session['signupOther'])) {
                    $modelTwProf->userId = Yii::$app->session['signupOther']['userId'];
                    $modelUser = User::find()->where(['id' => Yii::$app->session['signupOther']['userId']])->one();
                    $modelTwProf->save();
                    $signupEmailMessage = $this->renderPartial('application.views.emailTemplates.notificationTemplate', array(
                        'content' => $this->getSignupThankMessage(Yii::t('messages', 'Twitter'), $modelUser)
                    ), true
                    );

                    $this->sendThankYouEmail($signupEmailMessage, $modelUser->email, $modelUser->firstName);
                    return $this->redirect(array('signup/step4', 'network' => $network, 'userId' => Yii::$app->session['signupOther']['userId']));
                }

                //Custom field data
                $customFields = $customModel->getCustomData(CustomType::CF_PEOPLE, 0, CustomField::ACTION_CREATE, ToolKit::post('CustomValue'), CustomType::CF_SUB_VOLUNTEER_SIGN_UP);

                if (isset($_POST['User'])) {

                    if (Yii::$app->session->get('userId')) {
                        // We collected twitter info by cron, such user going to authenticate
                        // So already has a record in both user and twprofile table
                        $model = User::find()->where(['id' => Yii::$app->session->get('userId')])->one();
                        $model->scenario = 'signup';
                    } else {
                        // Check whether is there a record with same email. Then we do not duplicate it. Just add relavant network details only
                        $modelTmp = User::find()->where(['email' => $_POST['User']['email']])->one();
                        if (null != $modelTmp) {
                            $model = $modelTmp;
                            $model->scenario = 'signup';
                            $modelTwProf->userId = $model->id;
                            Feed::updateAll(['userType' => User::SUPPORTER], ['networkUserId' => $modelTwProf->twUserId]);
                            //check twitter account already saved
                            $old_twitter = TwProfile::find()->where(['twUserId' => $twProfInfo->id_str])->one();
                            if (null != $old_twitter) {
                                Yii::$app->session->setFlash('error', Yii::t('messages', 'Already sign in this Twitter profile'));
                                Yii::error("Already sign in this Twitter profile");
                                return $this->redirect(array('signup/step4', 'network' => $network, 'userId' => $model->id, 'reauth' => true));
                            } else {
                                if ($modelTwProf->save()) {
                                    Yii::error("Twitter profile data saved.Data:" . json_encode($modelTwProf->attributes));
                                    return $this->redirect(array('signup/step4', 'network' => $network, 'userId' => $model->id, 'reauth' => true));
                                } else {
                                    Yii::$app->session->setFlash('error', Yii::t('messages', 'Error on submitting signup information'));
                                    return $this->redirect(array('signup/step-three', 'network' => $network));
                                }
                            }
                        }
                    }

                    $model->attributes = $_POST['User'];
                    if (isset($_POST['intl-phone-input'])) {
                        $model->mobile = $_POST['intl-phone-input'];
                    }
                    $valid = $model->validate();
                    $valid = CustomField::validateCustomFieldList($customFields) && $valid;

                    if ($valid) {
                        Yii::error("Signup information saved.Data:" . json_encode($model->attributes));
                        try {
                            $model->joinedDate = User::convertSystemTime();
                            $model->signUpDate = User::convertSystemTime();
                            $model->createdAt = User::convertSystemTime();
                            $model->supporterDate = User::convertSystemTime();
                            $model->userType = User::SUPPORTER;
                            $model->signup = 1;
                            $model->profImage = $modelTwProf->profileImageUrl;
                            $model->password = $model->encryptUserPassword($model->password);
                            if ($model->saveWithCustomData($customFields, null, false)) {
                                $modelTwProf->userId = $model->id;

                                // Assign user to a team
                                $teamMeminfo = $model->assignTeam($model->zip, $model->id);
                                Yii::error("Team member assign info:" . json_encode($teamMeminfo));

                                // Assign role to supporter
                                $role = ($teamMeminfo['status'] && false === $teamMeminfo['moderate']) ? WebUser::SUPPORTER_ROLE_NAME : WebUser::SUPPORTER_WITHOUT_TEAM;// $erbacModule->assignItem($role, $model->id);
                                AuthAssignment::assignItem($role, $model->id);

                                // Update feeds status to prospect since that tweet has a connection
                                Feed::updateAll(['userType' => User::SUPPORTER], ['networkUserId' => $modelTwProf->twUserId]);

                                if ($modelTwProf->save()) {
                                    Yii::error("Twitter profile data saved.Data:" . json_encode($modelTwProf->attributes));
                                }

                                $signupEmailMessage = $this->renderPartial('@app/views/emailTemplates/notificationTemplate', array(
                                    'content' => $this->getSignupThankMessage(Yii::t('messages', 'Twitter'), $model)
                                ), true, $model
                                );

                                $this->sendThankYouEmail($signupEmailMessage, $model->email, $model->firstName);

                                return $this->redirect(array('signup/step4', 'network' => $network, 'userId' => $model->id));
                            }
                        } catch (Exception $e) {
                            Yii::$app->session->setFlash('error', Yii::t('messages', 'Error on submitting signup information'));
                            Yii::error("Error saving signup data.Error message:{$e->getMessage()}", E_WARNING);
                        }
                    } else {
                        Yii::error("Signup information save failed.Validation errors:" . json_encode($model->errors), E_WARNING);
                    }
                }

                $availableFields = array(
                    'firstName' => $twProfInfo->name,
                    'address1' => $twProfInfo->location,
                );

                $formFields = $model->getSignupFields($availableFields);

                break;

            case LinkedInApi::LINKEDIN:

                if (!isset(Yii::$app->session['lnProfInfo'])) {
                    $li = new LinkedInApi();
                    $li->setAccessToken(Yii::$app->session->get('accessToken'));
                    $lnProfInfo = $li->getProfileInfo();
                    $lnEmailInfo = $li->getEmailAddress();

                    // Check whether user has already being authenticated with LinkedIn and followed signup process
                    $lnModel = LnProfile::find()->where(['lnUserId' => $lnProfInfo['id']])->one();
                    if (null != $lnModel) {
                        $model = User::find()->where(['id' => $lnModel->userId])->one();
                        if (1 == $model->signup) {
                            Yii::error("Already authenticated with LinkedIn");
                            Yii::$app->session->setFlash('success', Yii::t('messages', 'You have already authenticated with LinkedIn.'));
                            return $this->redirect(array('signup/step1'));
                        } else {
                            Yii::error("Has a LinkedIn profile. May have collected via automated processes.");
                            Yii::$app->session->set('userId', $lnModel->userId);
                            Yii::$app->session->set('lnProfId', $lnModel->lnUserId);
                        }
                    }

                    // Save LinkedIn profile details on session. We have to save it database later.
                    Yii::$app->session['lnProfInfo'] = $lnProfInfo;
                    Yii::$app->session['lnEmailInfo'] = $lnEmailInfo;
                } else {
                    $lnProfInfo = Yii::$app->session['lnProfInfo'];
                    $li = new LinkedInApi();
                    $li->setAccessToken(Yii::$app->session->get('accessToken'));
                    $lnEmailInfo = $li->getEmailAddress();
                }

                // Just set values to twprofile model. save later
                $modelLnProf = new LnProfile();

                if (Yii::$app->session['lnProfId']) {
                    // We collected ln pfrofile info by cron, such user going to authenticate
                    // So already has a record in both user and LnProfile table
                    $modelLnProf = LnProfile::find()->where(['InUserId' => Yii::$app->session['lnProfId']])->one();
                }

                $modelLnProf->scenario = 'signup';
                $modelLnProf->lnUserId = $lnProfInfo['id'];
                $modelLnProf->firstName = $lnProfInfo['firstName']['localized']['en_US'];
                $modelLnProf->lastName = $lnProfInfo['lastName']['localized']['en_US'];
                $modelLnProf->email = $lnEmailInfo['elements']['0']['handle~']['emailAddress'];
                if (isset($lnProfInfo['headline'])) {
                    $modelLnProf->headline = $lnProfInfo['headline'];
                } else {
                    $modelLnProf->headline = null;
                }
                //$modelLnProf->location = @$lnProfInfo['location']['name'];
                $modelLnProf->location = $lnProfInfo['firstName']['preferredLocale']['country'];
                $modelLnProf->accessToken = Yii::$app->session['accessToken'];
                $modelLnProf->createdAt = date('Y-m-d H:i:s');
                $modelLnProf->tokenUpdatedAt = date('Y-m-d');
                if (isset($lnProfInfo['profilePicture'])) {
                    $modelLnProf->pictureUrl = $lnProfInfo['profilePicture']['displayImage'];
                } else {
                    $modelLnProf->pictureUrl = null;
                }

                // If user has already signed up with other network. We skip signup details collection
                // Just store particular network profile data
                if (!empty(Yii::$app->session['signupOther'])) {
                    $modelLnProf->userId = Yii::$app->session['signupOther']['userId'];
                    $modelUser = User::find()->where(['id' => Yii::$app->session['signupOther']['userId']])->one();
                    $modelLnProf->save();
                    $signupEmailMessage = $this->renderPartial('application.views.emailTemplates.notificationTemplate', array(
                        'content' => $this->getSignupThankMessage(Yii::t('messages', 'LinkedIn'), $modelUser)
                    ), true
                    );

                    $this->sendThankYouEmail($signupEmailMessage, $modelUser->email, $modelUser->firstName);
                    return $this->redirect(array('signup/step4', 'network' => $network, 'userId' => Yii::$app->session['signupOther']['userId']));
                }

                //Custom field data
                $customFields = $customModel->getCustomData(CustomType::CF_PEOPLE, 0, CustomField::ACTION_CREATE, ToolKit::post('CustomValue'), CustomType::CF_SUB_VOLUNTEER_SIGN_UP);

                if (isset($_POST['User'])) {

                    if (Yii::$app->session['userId']) {
                        // We collected LinkedIn info by cron, such user going to authenticate
                        // So already has a record in both user and twprofile table
                        $model = User::find()->where(['userId' => Yii::$app->session['userId']])->one();
                        $model->scenario = 'signup';
                    } else {
                        // Check whether is there a record with same email. Then we do not duplicate it. Just add relavant network details only
                        $modelTmp = User::find()->where(['email' => $_POST['User']['email']])->one();
                        if (null != $modelTmp) {
                            $model = $modelTmp;
                            $model->scenario = 'signup';
                            $modelLnProf->userId = $model->id;
                            Feed::updateAll(['userType' => User::SUPPORTER], ['networkUserId' => $modelLnProf->lnUserId]);
                            $old_linkedIn = LnProfile::find()->where(['lnUserId' => $lnProfInfo['id']])->one();
                            if (null != $old_linkedIn) {
                                Yii::$app->session->setFlash('error', Yii::t('messages', 'Already sign in this LinkedIn profile'));
                                Yii::error("Already sign in this LinkedIn profile");
                                return $this->redirect(array('signup/step4', 'network' => $network, 'userId' => $model->id, 'reauth' => true));
                            } else {
                                if ($modelLnProf->save()) {
                                    Yii::error("LinkedIn profile data saved.Data:" . json_encode($modelLnProf->attributes));
                                    return $this->redirect(array('signup/step4', 'network' => $network, 'userId' => $model->id, 'reauth' => true));
                                } else {
                                    Yii::$app->session->setFlash('error', Yii::t('messages', 'Error on submitting signup information'));
                                    return $this->redirect(array('signup/step-three', 'network' => $network));
                                }
                            }
                        }
                    }

                    $model->attributes = $_POST['User'];
                    if (isset($_POST['intl-phone-input'])) {
                        $model->mobile = $_POST['intl-phone-input'];
                    }
                    $valid = $model->validate();
                    $valid = CustomField::validateCustomFieldList($customFields) && $valid;

                    if ($valid) {
                        Yii::error("Signup information saved.Data:" . json_encode($model->attributes));
                        try {
                            $model->joinedDate = User::convertSystemTime();
                            $model->signUpDate = User::convertSystemTime();
                            $model->createdAt = User::convertSystemTime();
                            $model->supporterDate = User::convertSystemTime();
                            $model->userType = User::SUPPORTER;
                            $model->signup = 1;
                            $model->profImage = $modelLnProf->pictureUrl;
                            $model->password = $model->encryptUserPassword($model->password);
                            if ($model->saveWithCustomData($customFields, null, false)) {
                                $modelLnProf->userId = $model->id;

                                // Assign user to a team
                                $teamMeminfo = $model->assignTeam($model->zip, $model->id);
                                Yii::error("Team member assign info:" . json_encode($teamMeminfo));
                                // End
                                // Assign role to supporter
                                $role = ($teamMeminfo['status'] && false === $teamMeminfo['moderate']) ? WebUser::SUPPORTER_ROLE_NAME : WebUser::SUPPORTER_WITHOUT_TEAM;// $erbacModule->assignItem($role, $model->id);
                                AuthAssignment::assignItem($role, $model->id);
                                // Update feeds status to prospect since that tweet has a connection
                                Feed::updateAll(['userType' => User::SUPPORTER], ['networkUserId' => $modelLnProf->lnUserId]);

                                if ($modelLnProf->save(true)) {
                                    Yii::error("LinkedIn profile data saved.Data:" . json_encode($modelLnProf->attributes));
                                } else {
                                    Yii::error("LinkedIn profile data save failed.Validation failed:" . json_encode($modelLnProf->errors));
                                }

                                $signupEmailMessage = $this->renderPartial('@app/views/emailTemplates/notificationTemplate', array(
                                    'content' => $this->getSignupThankMessage(Yii::t('messages', 'LinkedIn'), $model)
                                ), true, $model
                                );

                                $this->sendThankYouEmail($signupEmailMessage, $model->email, $model->firstName);

                                return $this->redirect(array('signup/step4', 'network' => $network, 'userId' => $model->id));
                            }
                        } catch (Exception $e) {
                            Yii::$app->session->setFlash('error', Yii::t('messages', 'Error on submitting signup information'));
                            Yii::error("Error saving signup data.Error message:{$e->getMessage()}", E_WARNING);
                        }
                    } else {
                        Yii::error("Signup information save failed.Validation errors:" . json_encode($model->errors), E_WARNING);
                    }
                }

                $availableFields = array(
                    'firstName' => $modelLnProf->firstName,
                    'lastName' => $modelLnProf->lastName,
                );

                $formFields = $model->getSignupFields($availableFields);

                break;

            default:
                if (isset($_POST['User'])) {
                    // Check whether is there a record with same email. Then we do not duplicate it. Just update it
                    $modelTmp = User::findOne(array('email' => $_POST['User']['email']));
                    if (null != $modelTmp) {
                        $model = $modelTmp;
                        $model->scenario = 'onverify';
                        // Do nothing because he is already signed up
                        return $this->redirect(array('signup/step4', 'network' => $network, 'userId' => $model->id, 'reauth' => true));
                    }
                    $model->attributes = $_POST['User'];
                    if (isset($_POST['mobile'])) {
                        $model->mobile = $_POST['mobile'];
                    }
                    $model->scenario = 'signup';
                    $valid = $model->validate();
                    $valid = CustomField::validateCustomFieldList($customFields) && $valid;
                    if ($valid) {
                        $modelTmp = User::findOne(array('username' => @$_POST['User']['username']));
                        if (null === $modelTmp) {
                            try {
                                $model->joinedDate = User::convertSystemTime();
                                $model->signUpDate = User::convertSystemTime();
                                $model->supporterDate = User::convertSystemTime();
                                $model->userType = User::SUPPORTER;
                                $model->signup = 1;
                                $model->password = $model->encryptUserPassword($model->password);
                                $model->confPassword = $model->password;

                                if ($model->saveWithCustomData($customFields, null, false)) {
                                    $teamMeminfo = $model->assignTeam($model->zip, $model->id);
                                    if ($teamMeminfo['teamId'] === null) {
                                        $teamId = 0;
                                    } else {
                                        $teamId = $teamMeminfo['teamId'];
                                    }

                                    $role = ($teamMeminfo['status'] && false === $teamMeminfo['moderate']) ? WebUser::SUPPORTER_ROLE_NAME : WebUser::SUPPORTER_WITHOUT_TEAM;
                                    AuthAssignment::assignItem($role, $model->id);
                                    Yii::$app->toolKit->addActivity($model->id, Activity::ACT_USER_JOINED_TEAM, $teamId);
                                    $signupEmailMessage = $this->renderPartial('@app/views/emailTemplates/notificationTemplate', array(
                                        'content' => $this->getSignupThankMessage(Yii::t('messages', 'DigitaleBox'), $model)
                                    ), true, $model
                                    );
                                    $this->sendThankYouEmail($signupEmailMessage, $model->email, $model->firstName);
                                    Yii::info("saved signup data ");

                                    return $this->redirect(array('signup/step4', 'network' => $network, 'userId' => $model->id));
                                }
                            } catch (Exception $e) {
                                Yii::$app->session->setFlash('error', Yii::t('messages', 'Error on submitting signup information'));
                                Yii::error("Error saving signup data.Error message:" . json_encode($model->errors));

                            }
                        } else {
                            Yii::$app->session->setFlash('error', 'Username already taken');
                            Yii::error("Signup information save failed.Validation errors:" . json_encode($model->errors));
                        }
                    } else {
                        Yii::$app->session->setFlash('error', "Error on submitting signup information");
                        Yii::error("Signup information save failed.Validation errors:" . json_encode($model->errors));
                    }
                }

                $formFields = $model->getSignupFields($availableFields);

                break;
        }

        $ipInfo = Yii::$app->toolKit->getLocationByIp();
        Yii::$app->toolKit->setResourceInfo();

        if ("" != $model->longLat) {
            list($lat, $long) = explode(",", $model->longLat);
        } else {
            $lonLatData = Yii::$app->toolKit->getDefLonLat();
            $long = $lonLatData['lon'];
            $lat = $lonLatData['lat'];
        }
        return $this->render('signup_step_3', array(
            'model' => $model,
            'long' => $long,
            'lat' => $lat,
            'formFields' => $formFields,
            'signupRequiredFields' => $model->getSignupRequiredFields(),
            'customFields' => $customFields
        ));

    }

    /**
     * Perform ajax form validation.
     */
    private function performAjaxValidation($model, $formName, $customFields = array())
    {
        if (isset($_POST['ajax']) && $_POST['ajax'] === $formName) {
            $validateJson = ActiveForm::validate($model);
            $validateList = json_decode($validateJson, true);

            foreach ($customFields as $k => $customField) {
                $success = $customField->validate();
                if (!$success) {
                    $validateList['CustomValue_' . $customField->customFieldId . '_fieldValue'][] = $customField->errors['fieldValue'][0];
                }
            }
            echo json_encode($validateList);
            Yii::$app->end();
        }
    }

    /**
     * Fourth step of user signup.
     * @param integer $network Network identifier.
     * @return string
     */
    public function actionStep4($network, $userId, $reauth = false)
    {
        $this->layout = 'signup';
        $model = new User();
        Yii::$app->toolKit->setResourceInfo();

        return $this->render('signup_step_4', array(
            'model' => $model,
            'signUpLink' => Yii::$app->toolKit->getSignupUrl(),
            'reauth' => $reauth,
        ));
    }

    /**
     * Confirm email
     * @param string $uid User id
     * @return \yii\web\Response
     */
    public function actionEmailConfirm($uid)
    {
        $userId = base64_decode($uid);
        $model = User::findOne($userId);

        try {
            $model->isSignupConfirmed = 1;
            if ($model->save(false)) {
                Yii::error("Signup confirmation success.Userid:{$userId}");
                return $this->redirect(['/site/bypass-login', 'username' => $model->username, 'password' => $model->password]);
            } else {
                Yii::$app->session->setFlash('error', Yii::t('messages', 'Signup confirmation failed.'));
                Yii::error("Signup confirmation failed.Userid:{$userId}");
            }
        } catch (Exception $e) {
            Yii::$app->session->setFlash('error', Yii::t('messages', 'Signup confirmation failed.'));
            Yii::error("Signup confirmation failed.Userid:{$userId}.Error:{$e->getMessage()}");
        }

        return $this->redirect(['site/secure']);
    }

    /**
     * Begin signup process for client/Politician
     * sent with signup email.
     */
    public function actionSignUpClient($network)
    {
        Yii::$app->session->set('authType', 'client');
        Yii::error("Client going to authenticate with socal networks. Network:{$network}");
        return $this->redirect(array('signup/step2/', 'network' => $network));
    }

    /**
     * Begin social login process
     */
    public function actionSocialLogin($network)
    {
        Yii::$app->session->set('authType', 'user');
        Yii::error("User going to login with socal networks. Network:{$network}");
        //set linked_in_status to all permission
        if ($network == LinkedInApi::LINKEDIN) {
            Yii::$app->session->set('linked_in_status', 1);
        }
        return $this->redirect(array('signup/step2/', 'network' => $network));
    }

    /**
     * Relevant social network will redirect user to this action after the authentication process.
     * @param integer $network Network identifier, when starting the authentication process, we submit network identifier
     * along with callbak url.
     */
    public function actionCallback($network = null)
    {

        switch (Yii::$app->request->get('id')) {
            case TwitterApi::TWITTER:

                // check request domain && redirect
                if (isset($_REQUEST['domain'])) {

                    $redirectUrl = sprintf(Yii::$app->params['twitter']['redirectUri'], $_REQUEST['domain'], TwitterApi::TWITTER, $_REQUEST['oauth_token'], $_REQUEST['oauth_verifier']);
                    return $this->redirect($redirectUrl);
                    break;
                }

                if ("" != Yii::$app->request->get('denied', "")) {
                    Yii::error("User refused authentication with Twitter");
                    Yii::$app->toolKit->closePopupWindow();
                } elseif (isset($_REQUEST['oauth_token']) && Yii::$app->session->get('oauth_token') !== $_REQUEST['oauth_token']) {
                    Yii::$app->session->setFlash('error', Yii::t('messages', 'Twitter authentication failed'));
                    Yii::error("Twitter authentication failed");
                    Yii::$app->toolKit->closePopupWindow();
                } else {
                    // Create connection with request tokens
                    $connection = new TwitterApi();
                    // Request access tokens from twitter
                    $access_token = $connection->getAccessToken($_REQUEST['oauth_verifier']);
                    // Replace tokens with user`s access tokens
                    Yii::$app->session->set('oauth_token', $access_token['oauth_token']);
                    Yii::$app->session->set('oauth_token_secret', $access_token['oauth_token_secret']);

                    Yii::error("Twitter authentication success");

                    if ('client' == Yii::$app->session->get('authType')) {
                        return $this->redirect(array('site/auth-social', 'network' => TwitterApi::TWITTER));
                    } else if ('user' == Yii::$app->session->get('authType')) {
                        return $this->redirect(array('site/auth-social-login', 'network' => TwitterApi::TWITTER));
                    } else if ('friendFind' == Yii::$app->session->get('authType')) {
                        Yii::$app->toolKit->closePopupWindow(Yii::$app->urlManager->createUrl('friend-find/list-twitter-followers/'));
                    } else {
                        // Close popup box and redirect parent page to step3
                        Yii::$app->toolKit->closePopupWindow(Yii::$app->urlManager->createUrl(['signup/step-three/', 'network' => TwitterApi::TWITTER]));
                    }
                }

                break;

            /*case FacebookApi::FACEBOOK:

                if (isset($_GET['error_code']) && 'access_denied' == $_GET['error']) {
                    Yii::$app->user->setFlash('error', Yii::t('messages', 'Facebook authentication failed.'));
                    Yii::$app->appLog->writeLog('Facebook authentication failed. Reason:' . $_GET['error_description']);
                    Yii::$app->facebook->destroySession();
                    Yii::$app->toolKit->closePopupWindow();
                } else {
                    Yii::$app->facebook->getAccessToken();
                    Yii::$app->appLog->writeLog("Facebook authentication success");

                    if ('client' == Yii::$app->session['authType']) {
                        $this->redirect(array('Site/AuthSocial', 'network' => FacebookApi::FACEBOOK));
                    } else if ('user' == Yii::$app->session['authType']) {
                        $this->redirect(array('Site/AuthSocialLogin', 'network' => FacebookApi::FACEBOOK));
                    } else if ('friendFind' == Yii::$app->session['authType']) {
                        Yii::$app->toolKit->closePopupWindow(Yii::$app->createUrl('FriendFind/ListFacebookFriends/'));
                    } else {
                        // Close popup box and redirect parent page to step3
                        Yii::$app->appLog->writeLog("Close popup box and redirect parent page to step3");
                        Yii::$app->toolKit->closePopupWindow(Yii::$app->createUrl('Signup/Step3/', array('network' => FacebookApi::FACEBOOK)));
                    }
                }

                break;*/

            case LinkedInApi::LINKEDIN:
                if (empty($_GET['accessToken'])) {
                    Yii::$app->session->setFlash('error', Yii::t('messages', 'LinkedIn authentication failed.'));
                    Yii::error('LinkedIn authentication failed.');
                    Yii::$app->toolKit->closePopupWindow();
                } else {
                    Yii::error('LinkedIn authentication success.');
                    $accessToken = $_GET['accessToken'];
                    Yii::$app->session->set('accessToken', $accessToken);
                    if ('client' == Yii::$app->session['authType']) {
                        return $this->redirect(array('social-auth/auth-social', 'network' => LinkedInApi::LINKEDIN));
                    } else if ('user' == Yii::$app->session['authType']) {
                        return $this->redirect(array('site/auth-social-login', 'network' => LinkedInApi::LINKEDIN));
                    } else if ('friendFind' == Yii::$app->session['authType']) {
                        Yii::$app->toolKit->closePopupWindow(Yii::$app->urlManager->createUrl('friend-find/list-linked-in-friends/'));
                    } else {
                        Yii::$app->toolKit->closePopupWindow(Yii::$app->urlManager->createUrl(['signup/step-three/', 'network' => LinkedInApi::LINKEDIN]));
                    }
                }

                break;

            case Bitly::BITLY:

                if ('' == $_GET['accessToken']) {
                    Yii::$app->session->setFlash('error', Yii::t('messages', 'Bitly authentication failed.'));
                    Yii::error('Bitly authentication failed.');
                    Yii::$app->toolKit->closePopupWindow();
                } else {
                    Yii::error('Bitly authentication success.');
                    $accessToken = $_GET['accessToken'];
                    Yii::$app->session['accessToken'] = $accessToken;
                    if ('client' == Yii::$app->session['authType']) {
                        return $this->redirect(array('site/auth-social', 'network' => Bitly::BITLY));
                    }
                }

                break;
            case MailchimpApi::MAILCHIMP:
                $isSecure = Yii::$app->request->isSecureConnection;
                $isStaging = Yii::$app->toolKit->isStaging();
                $url = Yii::$app->params['mailchimp']['callbackUri'];
                if (!$isStaging) {
                    $url = str_replace('http://', 'https://', $url);
                }
                $isSecure = $isSecure ? 1 : 0;
                $state = Yii::$app->toolKit->domain . '|' . $isSecure;

                $mcOauth = new MC_OAuth2Client(
                    Yii::$app->params['mailchimp']['clientId'], Yii::$app->params['mailchimp']['clientSecret'], $url . '?state=' . $state
                );
                $session = $mcOauth->getSession();

                if (empty($session)) {
                    Yii::$app->session->setFlash('error', Yii::t('messages', 'Mailchimp authentication failed.'));
                    Yii::error('Mailchimp authentication failed. Access token retrieval failed.');
                    Yii::$app->toolKit->closePopupWindow();
                } else {
                    $rest = new MC_RestClient(Yii::$app->params['mailchimp']['clientId'], Yii::$app->params['mailchimp']['clientSecret'], $url . '?state=' . $state, $session);
                    $data = $rest->getMeta($session);
                    if ($data['user_id'] == '') {
                        Yii::$app->session->setFlash('error', Yii::t('messages', 'Mailchimp authentication failed.'));
                        Yii::error('Mailchimp authentication failed. User details retrieval failed');
                        Yii::$app->toolKit->closePopupWindow();
                    } else {
                        $data = json_decode(json_encode($data), true);
                        $data["access_token"] = $session['access_token'];
                        Yii::$app->session->set('mcUserData', $data);
                        if ('client' == Yii::$app->session['authType']) {
                            return $this->redirect(array('social-auth/auth-social', 'network' => MailChimpApi::MAILCHIMP));
                        }
                    }
                }

                break;

            default:

                Yii::error("Invalid callback request.");
                Yii::$app->toolKit->closePopupWindow();

                break;
        }
    }

    /**
     * Send signup complete email message.
     * @param string $message Message to be sent
     * @param string $email Receiver email address
     * @param string $name Receiver name
     */
    private function sendThankYouEmail($message, $email)
    {
        $subject = Yii::t('messages', 'DigitaleBox Signup');
        $fromEmail = Yii::$app->params['smtp']['senderEmail'];
        $fromName = Yii::$app->params['smtp']['senderLabel'];

        if (Yii::$app->toolKit->sendEmail(array($email), $subject, $message, null, null, $fromName, $fromEmail)) {
            Yii::error("Signup email sent. Email:{$email}");
        } else {
            Yii::error("Signup email sent failed. Email:{$email}");
        }
    }

    /**
     * Dynamically get relavant form elements.
     * @param string $filedName Field name
     * @param object $model Model object
     * @param object $form Form object
     * @return string $fieldContent HTML output of filed.
     */
    public static function getFormField($filedName, $model, $form, $signupRequiredFields)
    {
        $fieldContent = '';
        $userModel = new User();
        $attrLabel = $userModel->attributeLabels();
        switch ($filedName) {
            case 'email':
                //  $fieldContent = '<label>'.$attrLabel[$filedName].'</label>';
                $fieldContent = $form->field($model, $filedName)->textInput(['email', 'class' => 'form-control', 'id' => $filedName]);
                if ('1' == $model->isVerified) {
                    $fieldContent = $form->field($model, $filedName)->textInput(['email', 'class' => 'form-control', 'id' => $filedName]);
                }

                break;
            case 'firstName':
            case 'lastName':
            case 'mobile':
            case 'username':

                if ($filedName == 'mobile') {
                    $fieldContent = $form->field($model, $filedName)->widget(PhoneInput::className(), [
                        'jsOptions' => [
                            'preferredCountries' => ['no', 'pl', 'ua'],
                        ]
                    ]);
                    $fieldContent .= Html::error($model, $filedName);
                } else {
                    $fieldContent = $form->field($model, $filedName)->textInput(['class' => 'form-control', 'id' => $filedName]);
                }

                break;

            case 'address1':
                $fieldContent = $form->field($model, $filedName)->textArea(['class' => 'form-control', 'placeholder' => 'ex: 27 Avenue Pasteur']);
                break;

            case 'zip':
                $fieldContent = $form->field($model, $filedName)->textInput(['class' => 'form-control', 'placeholder' => 'ex: 14390']);

                break;

            case 'city':
                $fieldContent = '<label>' . $attrLabel[$filedName] . '</label>';
                $fieldContent .= $form->field($model, $filedName)->textInput(['class' => 'form-control', 'id' => 'User_city',
                    'placeholder' => 'ex: Paris'])->label(false);

                break;

            case 'gender':
                $fieldContent = $form->field($model, $filedName)->dropDownList(User::getUserGender());
                break;

            case 'countryCode':
                $fieldContent = $form->field($model, $filedName)->dropDownList(
                    Country::getCountryDropdown());

                break;

            case 'dateOfBirth':
                $fieldContent = $form->field($model, $filedName)->widget(\yii\jui\DatePicker::className(), ['clientOptions' => ['defaultDate' => '2014-01-01'], 'options' => ['class' => 'form-control'], 'dateFormat' => 'yyyy-MM-dd']);
                break;

            case 'password':
            case 'confPassword':
                $fieldContent = '<div class="form-group show_hide_password">';
                $fieldContent .= '<label class="m-0 control-label">' . $attrLabel[$filedName] . '</label>';
                $fieldContent .= '<div class="input-group">';
                $fieldContent .= $form->field($model, $filedName, [
                    'template' => '{label} <div class="row">
                                            <div class="col-sm-12 d-inline-flex">{input} 
                                                <div class="input-group-append">
                                                   <span class="input-group-text"><a href="" class="pwd-show">
                                                      <i class="fa fa-eye-slash" aria-hidden="true"></i></a>
                                                   </span>
                                                </div>
                                        </div><div class="col-sm-12 text-left">{error}</div>{hint}
                                    </div>',
                    'options' =>
                        [
                            'tag' => 'div',
                            'class' => 'w-100'
                        ]
                ])->passwordInput(['class' => 'form-control'])->label(false);
                $fieldContent .= ' </div> </div>';
                $fieldContent .= Html::error($model, $filedName);

                break;
        }

        if (in_array($filedName, $signupRequiredFields)) {
            return $fieldContent;
        }
    }

    /**
     * Unsubscribe from email
     * @param integer $userId Id of the user to be unsubscribed
     */
    public function actionUnsubscribe()
    {
        $userId = Yii::$app->request->get('userId');
        $this->layout = 'signup';
        $model = User::findOne($userId);
        $unsubSuccess = false;
        if (!is_null($model)) {
            $model->isUnsubEmail = 1;
            try {
                if ($model->save(false)) {
                    $unsubSuccess = true;
                    Yii::$app->appLog->writeLog("User unsubscribed form email alerts.User id:{$userId}");
                } else {
                    Yii::$app->appLog->writeLog("User unsubscribed fail email alerts.User id:{$userId}");
                }
            } catch (Exception $e) {
                Yii::$app->appLog->writeLog("User unsubscribed fail form email alerts.User id:{$userId},Error{$e->getMessage()}");
            }
        }

        return $this->render('unsub_email', array(
            'unsubSuccess' => $unsubSuccess
        ));
    }

    public function actionVerifyCode()
    {
        $verifyCode = $_POST['verifyCode'];
        $res = array('status' => '', 'message' => '');

        if ($verifyCode == Yii::$app->session->get('code')) {
            $res = array(
                'status' => 'SUCCESS',
                'message' => Yii::$app->toolKit->setAjaxFlash('success', Yii::t('messages', 'Verification success'), true),
            );
        } else {
            $res = array(
                'status' => 'FAILED',
                'message' => Yii::$app->toolKit->setAjaxFlash('error', Yii::t('messages', 'Verification failed'), true),
            );
        }

        echo json_encode($res);
    }

    public function actionCheckEmail()
    {
        $email = $_POST['email'];
        $model = new User();
        $model->scenario = "checkEmail";
        $model->email = $email;
        $fromEmail = Yii::$app->params['smtp']['senderEmail'];
        $fromName = Yii::$app->params['smtp']['senderLabel'];
        if ($model->validate()) {
            $res = array('status' => '', 'message' => '');
            $model = User::find()->where(['email' => $email])->one();
            if (null != $model) {
                $subjet = Yii::t('messages', "DigitaleBox");
                $code = uniqid();
                Yii::$app->session->set('code', $code);
                $message = $this->renderPartial('@app/views/emailTemplates/notificationTemplate', array(
                    'content' => Yii::t('messages', 'Email confirmation code:{code}', [
                        'code' => $code,
                    ])
                ), true
                );
                if (Yii::$app->toolKit->sendEmail(array($email), $subjet, $message, null, null, $fromName, $fromEmail)) {
                    Yii::error('Email confirmation code: ' . $code);
                    $res['status'] = 'EMAIL_EXISTS';
                    $res['message'] = Yii::$app->toolKit->setAjaxFlash('success', Yii::t('messages', 'You have already signed up with the entered email. Please enter the verification code sent to your email account'), true);
                } else {
                    Yii::error('EMAIL_SEND_FAILED');
                    $res['status'] = 'EMAIL_SEND_FAILED';
                    $res['message'] = Yii::$app->toolKit->setAjaxFlash('error', Yii::t('messages', 'Email check failed. Please try again later.'), true);
                }
            } else {
                $res['status'] = 'EMAIL_NOT_EXISTS';
                $res['message'] = Yii::$app->toolKit->setAjaxFlash('success', Yii::t('messages', 'Entered email is available.'), true);
            }
        } else {
            $res['status'] = 'INVALID_EMAIL';
            $res['message'] = Yii::$app->toolKit->setAjaxFlash('error', Yii::t('messages', 'Invalid email'), true);
        }

        echo json_encode($res);
    }


    /**
     * Prepare signup thank you message.
     * @param string $networkName Social network name that user signed up
     * @param User $userModel User model instance
     * @return string Final message to be delivered to user after completing the signup process
     */
    private function getSignupThankMessage($networkName, $userModel)
    {
        $link = Yii::$app->urlManager->createAbsoluteUrl('/signup/signup-other/', array('uid' => base64_encode($userModel->id)));
        $linkEmailConfirm = Yii::$app->urlManager->createAbsoluteUrl('/signup/email-confirm/', array('uid' => base64_encode($userModel->id)));
        $linkEmailConfirm = Yii::$app->urlManager->createAbsoluteUrl(['signup/email-confirm', 'uid' => base64_encode($userModel->id)]);

        $otherNetworks = '';

        $fbModel = FbProfile::findOne(array('userId' => $userModel->id));
        $twModel = TwProfile::findOne(array('userId' => $userModel->id));
        //  $lnModel = L::model()->findByAttributes(array('userId' => $userModel->id));


        if (empty($fbModel)) {
            $otherNetworks .= Yii::t('messages', 'Facebook');
            $otherNetworks .= ',';
        }

        if (empty($twModel)) {
            $otherNetworks .= Yii::t('messages', 'Twitter');
            $otherNetworks .= ',';
        }

        $otherNetworks = trim($otherNetworks, ',');

        $message = '<p style="font-size: 14px; margin-top: 0; color: #009994; font-family: \'Helvetica\', Arial, sans-serif;">' . Yii::t('messages', 'Dear {name},', [
                'name' => $userModel->firstName,
            ]) . '</p>';
        $message .= '<p></p>';
        $message .= '<p>';
        $message .= Yii::t('messages', 'Thank you for authenticating with {networkName}. ', ['networkName' => $networkName]);

        if (!$userModel->isSignupConfirmed) {
            $message .= Yii::t('messages', 'Click  <a href="{here}">here</a>   to confirm your sign up.', [
                'here' => $linkEmailConfirm,
            ]);
        }

        if (!empty($otherNetworks)) {
            $message .= Yii::t('messages', 'You can authenticate us with {otherNetworks} as well.', [
                'otherNetworks' => Html::a(Yii::t('messages', $otherNetworks), $link),
            ]);
        }

        $message .= '</p>';
        $message .= '<p></p>';
        $message .= Yii::t('messages', 'DigitaleBox Team');

        return $message;
    }

    /* To send emails for share by email feature,
       * since there is no common action in a super class this action method is defined to reuse for ajax calls.
       * @param array $toAddress to Addresses
       * @param string $subject Subject of the email
       * @param string $body Message body
       */
    public function actionShareByEmail()
    {
        $toAddress = isset($_POST['email']) ? $_POST['email'] : null;
        $subject = isset($_POST['subject']) ? $_POST['subject'] : null;
        $body = isset($_POST['body']) ? $_POST['body'] : null;
        if (is_null($toAddress) || is_null($subject) || is_null($body)) {
            echo Json::encode(array(
                'status' => '0',
                'message' => Yii::t('messages', 'Email sending failed.. Please try again later.')
            ));
        } else {
            if (Yii::$app->toolKit->sendEmail(array($toAddress), $subject, $body, null, null, null, null)) {
                echo Json::encode(array('status' => '1', 'message' => Yii::t('messages', 'Email sent.')));
                Yii::error("Email sent.");
            } else {
                echo Json::encode(array(
                    'status' => '0',
                    'message' => Yii::t('messages', 'Email sending failed. Please try again later.')
                ));
                Yii::error("Email sending failed.");
            }
        }
    }

}
