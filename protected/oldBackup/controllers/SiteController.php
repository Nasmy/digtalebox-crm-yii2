<?php

namespace app\controllers;

use app\components\ThresholdChecker;
use app\models\App;
use app\models\BitlyProfile;
use app\models\CandidateInfo;
use app\models\Configuration;
use app\models\LnPageInfo;
use app\models\LnProfile;
use app\models\McProfile;
use app\models\TwProfile;
use app\models\User;
use Mailchimp\MailChimpApi;
use Yii;
use yii\base\ExitException;
use yii\base\InvalidConfigException;
use yii\db\Exception;
use yii\filters\AccessControl;
use yii\helpers\Html;
use yii\helpers\Json;
use yii\web\Controller;
use yii\web\Cookie;
use yii\web\Response;
use app\models\LoginForm;
use app\models\FeedSearchKeyword;
use yii\widgets\ActiveForm;
use app\components\ToolKit;
use app\components\TwitterApi;
use app\components\LinkedInApi;
use app\components\Bitly;
use app\controllers\WebUserController;

/**
 * Site Controller.
 * This class illustrate Initial loader of root page
 */
class SiteController extends WebUserController
{
    public $layout = 'column1';
    public $toolKit;


    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['Error', 'Login', 'Logout', 'ForgotPassword', 'ResetPassword', 'Inactive', 'Deactivate', 'Init',
                    'ResendConfirmation', 'BypassLogin', 'AuthSocialLogin', 'TestTwUserSearch', 'TestEmail', 'ChangeLang',
                    'Upgrade', 'AutoLoginToSales', 'Site.FlushCache', 'Site.Captcha'
                ],
                'rules' => [
                    [
                        'allow' => true,
                        'actions' => ['Index', 'AuthSocial', 'FbPages', 'LnPages', 'AddLnpage', 'Addpage', 'SaveChangeOrg'
                        ],
                        'roles' => ['?'],
                    ],
                    [
                        'allow' => true,
                        'actions' => ['logout'],
                        'roles' => ['@'],
                    ],
                ],
            ],
        ];
    }


    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }


    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
                'view' => '@app/views/site/error.php',
                'layout' => 'error'
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }


    /**
     * {@inheritdoc}
     */
    public function beforeAction($action)
    {
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }


    /**
     * Displays homepage.
     *
     * @return string
     */
    public function actionIndex()
    {
        $isPolitician = false;
        if (!Yii::$app->user->isGuest) {

            if (User::POLITICIAN == Yii::$app->user->identity->userType) {
                $isPolitician = true;
            }

            $modelConfiguration = new Configuration();

            $dbConfig = $modelConfiguration->getConfigurations();

            $isSiteGuideViewed = true;

            if (!$dbConfig[Configuration::CLIENT_FIRST_TIME_SITE_GUIDE] && $isPolitician) {
                $modelConfig = Configuration::findOne(Configuration::CLIENT_FIRST_TIME_SITE_GUIDE);
                try {
                    $isSiteGuideViewed = false;
                    $modelConfig->value = 1;
                    $modelConfig->save();
                } catch (Exception $e) {
                }
            }

            if (isset($_GET['siteGuide'])) {
                $isSiteGuideViewed = false;
            }
            if (App::FREEMIUM == Yii::$app->session->get('packageTypeId')) {
                return $this->redirect(['broad-message/admin', 'isSiteGuideViewed' => $isSiteGuideViewed]);
            }
            return $this->redirect(['dashboard/dashboard', 'isSiteGuideViewed' => $isSiteGuideViewed]);
        } else {
            return $this->redirect('site/init');
        }
    }

    /**
     * @param $lang
     * @return Response
     */
    public function actionChangeLang($lang)
    {
        Yii::$app->language = $lang;
        Yii::$app->session->set('lang', $lang);
        $languageCookie = new Cookie([

            'name' => 'language',

            'value' => $lang,

            'expire' => time() + 60 * 60 * 24 * 30,

        ]);


        Yii::$app->response->cookies->add($languageCookie);
        return $this->redirect(Yii::$app->request->referrer);
    }

    /**
     * Logout action.
     *
     * @return Response
     */
    public function actionLogout()
    {
        Yii::$app->user->logout();

        return $this->goHome();
    }

    /**
     * @return string|Response
     * @throws ExitException
     */
    public function actionInit()
    {
        if (!Yii::$app->user->isGuest) {
            return $this->goHome();
        }
        $this->layout = 'init';
        Yii::$app->session->remove('isBypass');
        $model = new LoginForm();
        $modalCandidateInfo = CandidateInfo::find()->one();
        if (isset($_POST['ajax']) && $_POST['ajax'] === 'login-form') {
            echo ActiveForm::validate($model);
            Yii::$app->end();
        }
        // enter into login form
        if (isset($_POST['LoginForm'])) {
            $model->attributes = $_POST['LoginForm'];
            if ($model->validate() && $model->login()) {
                $identity = Yii::$app->user->identity;
                if (!$identity->isSignupConfirmed) {
                    $userId = Yii::$app->user->id;
                    Yii::$app->appLog->writeLog('Login failed. User not confirmed email');
                    Yii::$app->user->logout();
                    $link = Html::a(Yii::t('messages', 'here'), array('site/resend-confirmation', 'userId' => $userId));
                    Yii::$app->session->setFlash('error', Yii::t('messages', "You have not confirmed the sign up. Click {$link} to resend the confirmation email."));
                } else {
                    $isPartner = Yii::$app->session->get('isPartner');
                    if ($isPartner === 1) {
                        $partner = User::findOne(User::PARTNER_USER_ID);
                        if (ToolKit::isEmpty($partner->email)) {
                            Yii::$app->session->setFlash('info', Yii::t('messages', 'Please update your Partner profile before continuing.'));
                            Yii::$app->response->redirect(['user/my-account']);
                        } else {
                            return $this->redirect(['site/index', 'isLogin' => true]);
                        }
                    } else {
                        return $this->redirect(['site/index', 'isLogin' => true]);
                    }
                }
            } else {
                Yii::$app->appLog->writeLog('Login failed. User not confirmed email');
                Yii::$app->session->setFlash('error', Yii::t('messages', 'Invalid username or password'));
            }
        }

        Yii::$app->toolKit->setResourceInfo();
        $imgSliderItems = array();
        if ('' != $modalCandidateInfo->frontImages) {
            $frontImages = json_decode($modalCandidateInfo->frontImages, true);
            foreach ($frontImages as $imageinfo) {
                if ($imageinfo['isDefault']) {
                    $imgPath = Yii::$app->toolKit->getImagePath() . $imageinfo['name'];
                } else {
                    $imgPath = '/' . Yii::$app->toolKit->resourcePathRelative . $imageinfo['name'];
                }

                $imgSliderItems[] = array('image' => $imgPath);
            }
        }
        $appData = Yii::$app->toolKit->getAppData();
        $packageData = Yii::$app->toolKit->getPackageData($appData['packageType']);

        return $this->render('init', [
            'model' => $model,
            'imgSliderItems' => $imgSliderItems,
            'modelCandidateInfo' => $modalCandidateInfo,
            'packageType' => $packageData['PackageTypeId']
        ]);

    }


    public function actionLnPages()
    {
        $this->layout = 'dialog';
        $ln = new LinkedInApi();
        $clientProfiles = User::getClientProfile(array('LN'));
        $modelLnProfile = $clientProfiles['modelLnProfile'];
        Yii::$app->appLog->writeLog("Ln Profile  model: " . json_encode($modelLnProfile));

        if (isset($modelLnProfile)) {
            $ln->setAccessToken($modelLnProfile->accessToken);
            $userP = $ln->getPages();
            Yii::$app->appLog->writeLog("LinkedIn pages:" . json_encode($userP));
            return $this->render('lnPages', array(
                'userP' => $userP
            ));
        } else {
            return Yii::t('messages', 'please re authenticate linkedIn');
        }

    }

    public function actionAddLnpage()
    {
        if (isset($_POST['id'])) {
            $id = $_POST['id'];
            $name = $_POST['name'];
            $configFormModel = new Configuration();
            $models = Configuration::find()->all();
            foreach ($models as $model) {
                switch ($model->key) {
                    case Configuration::LN_PAGE:
                        $model->value = $name;
                        $model->scenario = 'update';
                        $model->save();
                        break;
                }
            }
        }

        $model = LnPageInfo::find()->where(['pageName' => $name])->one();
        if (null == $model) {
            $model = new LnPageInfo();
        }

        $model->pageId = $id;
        $model->pageName = $name;
        $model->save(false);

        Yii::$app->appLog->writeLog("Adding LnPageInfo model: " . json_encode($model));

        $res = array('status' => 1, 'message' => Yii::$app->toolKit->setAjaxFlash('success', Yii::t('messages', 'Page correctly added'), true));
        echo Json::encode($res);
    }

    /**
     * @return string
     * @throws InvalidConfigException
     */
    public function actionForgotPassword()
    {
        $this->layout = 'forgotPassword';
        $model = new User();
        $model->scenario = 'resetPassword';
        $modelOrig = clone $model;
        $closePopup = false;
        $fromEmail = Yii::$app->params['smtp']['senderEmail'];
        $fromName = Yii::$app->params['smtp']['senderLabel'];
        $requestUrl = "";
        $res = array();

        if ($model->load(Yii::$app->request->post())) {
            $res = array();
            if (isset($_POST['User'])) {
                if ($model->validate()) {  // Checking model is null or not from search
                    $email = $model->email;
                    $model = User::find()->where(['email' => $email])->one();

                    // check the given email is belonging to system user and a valid user
                    if (null != $model && User::SYSTEM_USER == $model->isSysUser) {

                        // create the encrypted rest token
                        $restToken = $model->encryptUserPassword($model->getNewPassword());

                        //Get base url
                        $baseUrlParam = Yii::$app->request->getHostInfo();

                        $subject = Yii::t('messages', $_SERVER['SERVER_NAME'] . " - Password Recovery");
                        $message = $this->renderPartial('@app/views/emailTemplates/notificationTemplate', array(
                            'content' => Yii::t('messages', 'Hello {name}, <br><br>
                        You can reset the password for your Digitalebox account by clicking <a href="{url}">here</a> 
                        <br><br> Username: {username} <br><br> If you didn\'t request a password reset, please ignore 
                        this email.',
                                [
                                    'url' => $baseUrlParam . '/index.php/site/reset-password?resetToken=' . $restToken,
                                    'name' => $model->firstName . ' ' . $model->lastName,
                                    'username' => $model->username,
                                ]
                            )
                        ));

                        if (Yii::$app->toolKit->sendEmail(array($model->email), $subject, $message, null, null, $fromName, $fromEmail)) {
                            try {
                                $requestUrl = Yii::$app->getUrlManager()->getBaseUrl();
                                //Saving the reset token in the DB
                                $model->pwResetToken = $restToken;
                                $model->resetPasswordTime = date("Y-m-d H:i:s");
                                $model->save(false);
                                Yii::error("Password reset and sent. Email:{$email}, Name:{$model->firstName}, User id:{$model->id}, Password Reset Token:{$restToken}");
                                $res = Yii::$app->toolKit->setAjaxFlash('success', Yii::t('messages', 'Password reset token is emailed to your email account. You will be redirected to login page...'), true);
                            } catch (Exception $e) {
                                Yii::error("Password reset failed. Email:{$email}, User id:{$model->id}, Error:{$e->getMessage()}");
                                $res = Yii::$app->toolKit->setAjaxFlash('error', Yii::t('messages', 'Password reset failed. Please try again later.'), true);
                            }

                        } else {
                            $res = Yii::$app->toolKit->setAjaxFlash('error', Yii::t('messages', 'Email sent failed. Please try again later'), true);
                            Yii::error("Password email failed. Email:{$email}, Name:{$model->firstName}, User id:{$model->id}");
                        }
                    } else {
                        $model = $modelOrig;
                        $res = Yii::$app->toolKit->setAjaxFlash('error', Yii::t('messages', 'Entered email does not match with the account email'), true);
                        Yii::error("Account not found for the email. Email:{$email}");
                    }
                    $closePopup = true;
                }
            }
        }

        if (!empty($res)) {
            $resp = $res;
        } else {
            $resp = null;
        }

        return $this->render('forgotPw', array(
            'model' => $model,
            'closePopup' => $closePopup,
            'requestUrl' => $requestUrl,
            'resp' => $resp
        ));
    }

    /**
     * @return string
     * @throws InvalidConfigException
     */
    public function actionResetPassword()
    {
        $this->layout = 'forgotPassword';
        $model = new User();
        $model->scenario = 'typeNewPassword';
        $resetToken = Yii::$app->request->getQueryParams('resetToken');
        $requestUrl = "";
        //Get the user model
        $userModel = User::Find()->where(['pwResetToken' => $resetToken])->one();
        if (!empty($userModel)) {
            if (isset($_POST['User'])) {

                $model->confPassword = $_POST['User']['confPassword'];
                $model->password = $_POST['User']['password'];

                if ($model->validate()) {
                    //Encrypt the password
                    $password = $model->encryptUserPassword($model->password);

                    //Add the encrypted password to the user model and remove token
                    $userModel->password = $password;
                    $userModel->pwResetToken = '';
                    if ($userModel->save()) {

                        if ($userModel->userType == User::POLITICIAN && Yii::$app->session->get('isPartner') == 0) {
                            $userModel->updateMasterProfile();
                        }
                        $requestUrl = Yii::$app->getUrlManager()->getBaseUrl();
                        $model = new User();
                        Yii::$app->appLog->writeLog('New password added');
                        Yii::$app->session->setFlash('success', Yii::t('messages', 'New password is saved.'));
                        return $this->redirect('init');
                    } else {
                        Yii::$app->appLog->writeLog('New password added');
                        Yii::$app->session->setFlash('error', Yii::t('messages', 'Failed to save new password.'));
                    }


                } else {
                    Yii::$app->appLog->writeLog('Password change failed.Validation errors:' . CJSON::encode($model->errors));
                }
            } else {

                $model->password = '';
            }

            return $this->render('resetPassword', array(
                'model' => $model,
                //'requestUrl' => $requestUrl,
            ));
        } else {
            Yii::$app->appLog->writeLog('Token Failed:');
            Yii::$app->session->setFlash('error', Yii::t('messages', '<b>Looks like the password reset token has expired or invalid. Please request a new one.</b>.'));
            return $this->redirect('init');
        }
    }

    /**
     * When user confirms email by pass login
     * @param string $username Username
     * @param string $password
     * @return Response
     */
    public function actionBypassLogin($username, $password)
    {
        $model = new LoginForm();

        $model->username = $username;
        $model->password = $password;
        Yii::$app->session->set('isBypass', true);

        if ($model->validate() && $model->login()) {
            if (!Yii::$app->session->get('isSignupConfirmed')) {
                $userId = Yii::$app->user->identity->id; // This is set from Useridentiy class
                Yii::$app->appLog->writeLog('Login bypass failed. User not confirmed email.');
                Yii::$app->user->logout();

                $link = Html::a(Yii::t('messages', 'here'),
                    ['/site/resend-confirmation', 'userId' => $userId]
                );

                Yii::$app->session->setFlash('error', Yii::t('messages', 'Authentication failed. Please login to your email and verify your account or Click {here} to resend the confirmation email.', ['here' => $link]));
                return $this->redirect('init');
            } else {
                Yii::$app->appLog->writeLog('Login bypass success');
                return $this->redirect(array('/site/index', 'isLogin' => true));
            }
        } else {
            Yii::$app->appLog->writeLog('Login bypass failed');
            Yii::$app->session->setFlash('error', Yii::t('messages', 'Login failed'));
            return $this->redirect('/site/init');
        }
    }

    /**
     * Resend signup confirmation email again
     * @param string $userId Id of the user
     */
    public function actionResendConfirmation($userId)
    {
        $model = User::findOne($userId);
        $subject = Yii::t('messages', 'DigitaleBox');
        $fromEmail = Yii::$app->params['smtp']['senderEmail'];
        $fromName = Yii::$app->params['smtp']['senderLabel'];

        $linkEmailConfirm = Yii::$app->urlManager->createAbsoluteUrl(['/signup/email-confirm/', 'uid' => base64_encode($model->id)]);

        $message = $this->renderPartial('@app/views/emailTemplates/notificationTemplate', array(
            'content' => Yii::t('messages', 'Click {here} to confirm sign up.', array(
                'here' => Html::a(Yii::t('messages', 'here'), $linkEmailConfirm),
            ))
        ));

        if (Yii::$app->toolKit->sendEmail([$model->email], $subject, $message, null, null, $fromName, $fromEmail)) {
            Yii::$app->appLog->writeLog("Signup confirmation email sent.Email:{$model->email}");
            Yii::$app->session->setFlash('success', Yii::t('messages', 'Email sent to {email}.', array('email' => $model->email)));
        } else {
            Yii::$app->appLog->writeLog("Signup confirmation email sent failed.Email {$model->email}");
            Yii::$app->session->setFlash('error', Yii::t('messages', 'Email sent failed to {email}. Please try again later.', array('email' => $model->email)));
        }

        return $this->redirect('init');
        return;
    }

    /**
     * This is the action to handle external exceptions.
     */
    public function actionErrors()
    {
        // $this->layout = 'error';
        $exception = $code = Yii::$app->errorHandler->exception;
        $error = Yii::$app->errorHandler->exception;
        $code = $exception->statusCode;
        if ($error) {
            if (Yii::$app->request->isAjax) {
                echo $error['message'];
            } else {

                $message = 'The system is unable to find the requested action';
                Yii::$app->appLog->writeLog("Error code: " . $code . ",  exception:" . $error);

                return $this->render('error', [
                    'message' => $message,
                    'code' => $code,
                ]);
            }

        }
    }

    public function actionAuthSocial($network)
    {
        Yii::$app->appLog->writeLog("Redirected from social network. Network:{$network}");
        Yii::$app->session->remove('authType');

        switch ($network) {
            case TwitterApi::TWITTER:
                //print_r(Yii::$app->session->get('oauth_token_secret'));die;
                $connection = new TwitterApi();
                $twProfInfo = $connection->get('https://api.twitter.com/1.1/account/verify_credentials.json', ['oauth_token' => Yii::$app->session->get('oauth_token'), 'oauth_token_secret' => Yii::$app->session->get('oauth_token_secret')]);

                $modelTwProfiles = TwProfile::find()->where(['userId' => Yii::$app->user->getId()])->all();

                if (count($modelTwProfiles) >= 1) {
                    Yii::$app->appLog->writeLog("There are more than one TwProfiles. So delete the other account if it not the same.");
                    foreach ($modelTwProfiles as $_modelTwProf) {
                        if ($_modelTwProf->twUserId != $twProfInfo->id_str) {
                            $_modelTwProf->delete();
                            Yii::$app->appLog->writeLog("Account deleted.LnUserId:{$_modelTwProf->twUserId}");
                        }
                    }
                }

                $modelTwProf = TwProfile::find()->where(['twUserId' => $twProfInfo->id_str])->one();
                if ($modelTwProf == null)
                    $modelTwProf = new TwProfile();

                // $modelTwProf->scenario = 'signup';
                $modelTwProf->userId = Yii::$app->user->getId();
                $modelTwProf->twUserId = $twProfInfo->id_str;
                $modelTwProf->name = $twProfInfo->name;
                $modelTwProf->screenName = $twProfInfo->screen_name;
                $modelTwProf->authToken = Yii::$app->session->get('oauth_token');
                $modelTwProf->authTokenSecret = Yii::$app->session->get('oauth_token_secret');
                $modelTwProf->location = $twProfInfo->location;
                $modelTwProf->profileImageUrl = $twProfInfo->profile_image_url;
                $modelTwProf->followerCount = $twProfInfo->followers_count;
                $modelTwProf->friendsCount = $twProfInfo->friends_count;
                $modelTwProf->createdAt = date('Y-m-d H:i:s', strtotime($twProfInfo->created_at));

                try {
                    if ($modelTwProf->save()) {
                        $userModel = User::find()->where(['id' => Yii::$app->user->getId()])->one();
                        $userModel->signup = 1;
                        $userModel->save(false);
                        $FeedSearchKeyword = new FeedSearchKeyword();
                        // Update Configaration
                        Configuration::updateAll(['value' => 'true'], ['=', 'key', 'TW_ACCESS_TOKEN_UPDATED']);
                        $FeedSearchKeyword->addTwitterHandler('@' . $twProfInfo->screen_name);
                        Yii::$app->appLog->writeLog("Politician Twitter authentication success");
                        Yii::$app->session->setFlash('success', Yii::t('messages', 'Twitter authentication success.'));


                    } else {
                        Yii::$app->appLog->writeLog("Politician Twitter authentication failed");
                        Yii::$app->session->setFlash('error', Yii::t('messages', 'Twitter authentication failed.'));
                    }


                } catch (Exception $e) {
                    Yii::$app->appLog->writeLog("Politician Twitter authentication failed");
                    Yii::$app->session->setFlash('error', Yii::t('messages', 'Twitter authentication failed.'));
                }
                $redirect_url = Yii::$app->urlManager->createAbsoluteUrl(['dashboard/dashboard', 'isSiteGuideViewed' => 1]);
                Yii::$app->toolKit->closePopupWindow($redirect_url, false);

                break;

        }
    }


    public function actionUpgrade($thresholdType)
    {
        switch ($thresholdType) {
            case ThresholdChecker::EMAIL_CONTACTS:
                Yii::$app->session->setFlash('warning', Yii::t('messages', 'You have reached maximum email contacts allowed. Upgrade your plan'));
                break;
            case ThresholdChecker::EMAIL_CONTACTS:
                Yii::$app->session->setFlash('warning', Yii::t('messages', 'You have reached maximum social contacts allowed. Upgrade your plan'));
                break;
        }

        return $this->render('upgrade');
    }


    /**
     * Redirects to Sales portal auto login
     * @param string $redUrl Redirect URL after login
     * deprecated
     */
    public function actionSalesAutoLogin($redUrl)
    {
        //actionAutoLoginToSales method is not working properly so we careated this method to fetch user data from MasterDB
        $masterUserId = Yii::$app->session->get('masterUserId');
        $userModel = Yii::$app->toolKit->getAppUserData($masterUserId);

        return $this->redirect(Yii::$app->params['salesAppUrl'] . "/site/bypassLogin?username={$userModel['username']}&password={$userModel['password']}&retUrl={$redUrl}");
    }


    /**
     * Redirects to Sales portal auto login
     * @param string $redUrl Redirect URL after login
     * deprecated
     */
    public function actionAutoLoginToSales($redUrl)
    {
        $clientProfiles = User::getClientProfile(array('TW'));
        $model = $clientProfiles['modelUser'];
        return $this->redirect(Yii::$app->params['salesAppUrl'] . "/site/bypassLogin?username={$model->username}&password={$model->password}&retUrl={$redUrl}");
    }

    /**
     * Inactive applications
     */
    public function actionInactive()
    {
        $this->layout = 'init';
        echo $this->render('inactive');
        exit();
    }

    /**
     * Deactivated applications
     */
    public function actionDeactivate()
    {
        $this->layout = 'init';
        echo $this->render('deactivate');
        exit();
    }

    /**
     * Access Denied
     */
    public function actionAccessDenied()
    {
        echo $this->render('accessDenied');
        exit();
    }

}
